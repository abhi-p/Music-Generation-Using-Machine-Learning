{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"first_network","provenance":[],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"EYfTheRzP2zB","colab_type":"code","outputId":"f2c31c9c-d312-4723-ef90-aefa5f63c621","executionInfo":{"status":"ok","timestamp":1582755300252,"user_tz":300,"elapsed":8142,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":157}},"source":["!pip install pypianoroll\n","!pip install mido\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","\n","import mido\n","import pypianoroll\n","import matplotlib.pyplot as plt\n","from pypianoroll import Multitrack, Track\n","import os\n","import numpy as np\n","import time\n","\n","from google.colab import drive \n","drive.mount('/content/drive', force_remount= True)\n","\n","\n","drive_path    = 'drive/My Drive/Capstone - ECE496/'\n","data_in_path  = 'midi/'\n","output_path ='out_midi/'\n","\n","midi_dir = drive_path + data_in_path\n","out_dir = drive_path + output_path"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: pypianoroll in /usr/local/lib/python3.6/dist-packages (0.5.3)\n","Requirement already satisfied: scipy<2.0,>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from pypianoroll) (1.4.1)\n","Requirement already satisfied: six<2.0,>=1.0.0 in /usr/local/lib/python3.6/dist-packages (from pypianoroll) (1.12.0)\n","Requirement already satisfied: numpy<2.0,>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from pypianoroll) (1.17.5)\n","Requirement already satisfied: pretty-midi<1.0,>=0.2.8 in /usr/local/lib/python3.6/dist-packages (from pypianoroll) (0.2.8)\n","Requirement already satisfied: mido>=1.1.16 in /usr/local/lib/python3.6/dist-packages (from pretty-midi<1.0,>=0.2.8->pypianoroll) (1.2.6)\n","Requirement already satisfied: mido in /usr/local/lib/python3.6/dist-packages (1.2.6)\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"i2BtxZM38DO7","colab_type":"text"},"source":["##Loading music segments\n","\n"]},{"cell_type":"code","metadata":{"id":"BNbEeplsvCkH","colab_type":"code","colab":{}},"source":["#OLD CODE\n","'''\n","list entire directory\n","get unique file #s ->xxx.xxx.midi\n","load pairs of files into lists of tuples\n","'''\n","\n","\n","'''\n","time_factor =  1 # split to smaller second clips for testing overfitting capability of model\n","max_counter =  20 #number of files to load\n","counter=0\n","\n","#contains an array of tuples(input, target)\n","tupleArr=[]\n","\n","#contains a 2 element tuple, converted into tuple type later\n","tuple_list=[]\n","\n","dir_path = \"drive/My Drive/Capstone - ECE496/single_note_random_split\"\n","dir_files = os.listdir(dir_path)\n","dir_files.sort()\n","current_song=\"\"\n","\n","for midi_file_num in dir_files:\n","  '''\n","  #extract tempo\n","  song_tempo = 0\n","  test_file = mido.MidiFile(dir_path +\"/\" + midi_file_num)\n","  for msg in test_file:\n","    if msg.is_meta:\n","        split = str(msg).split()\n","        if 'set_tempo' in split:\n","            song_tempo = int(mido.tempo2bpm(int(split[3].split('=')[1]))) #mido uses tempo in ms/beat but pypianoroll uses beat/min as tempo\n","            break\n","  '''\n","  '''\n","  if bad_list:\n","    if midi_file_num in bad_list:\n","        pproll = pypianoroll.parse(dir_path + \"/\" + midi_file_num)\n","        print(midi_file_num, len(pproll.tracks[0].pianoroll))\n","  '''\n","  #set flag to false at beginning of each iteration\n","  new_song = False\n","\n","  #checks if we are in a new song or current song\n","  if(current_song != midi_file_num.split(\".\")[0]):\n","    new_song = True\n","    current_song = midi_file_num.split(\".\")[0]\n","\n","  #gets the current song interval part  \n","  current_part = midi_file_num.split(\".\")[1]\n","\n","  #if in a new song, reset variables\n","  if new_song:\n","    index=0\n","    tuple_list=[]\n","\n","\n","  \n","  #add element to tuple\n","  pproll = None\n","  pproll = pypianoroll.parse(dir_path + \"/\" + midi_file_num)\n","  pproll.name = midi_file_num\n","  #to indicate timesteps with no note on\n","  for i in range(len(pproll.tracks)): #iterate over tracks\n","    for j in range(len(pproll.tracks[i].pianoroll)): #iterate over timesteps\n","      \n","      for k in range(48,72): #iterate over notes\n","          if pproll.tracks[i].pianoroll[j][k] != 0:\n","            pproll.tracks[i].pianoroll[j][k] = 1\n","            #print(k)\n","      if 1 not in pproll.tracks[i].pianoroll[j]:\n","          pproll.tracks[i].pianoroll[j][0] = 1 #TODO make this less sketchy, setting index 0 = 1 to represent no notes on\n","\n","  tuple_list.append(pproll)\n","\n","  #if tuple(input, target) complete, add to array of tuples, reset vars\n","  if(index != 1):\n","    index=index+1\n","  elif(index ==1):\n","\n","    #tuple has both input and target now\n","    t = tuple(tuple_list)\n","    #print(t)\n","    tupleArr.append(t)\n","\n","    #reset and add initial element to tuple\n","    tuple_list = []\n","    pproll = None\n","    pproll = pypianoroll.parse(dir_path + \"/\" + midi_file_num)\n","    pproll.name = midi_file_num\n","    \n","    #to indicate timesteps with no note on\n","    for i in range(len(pproll.tracks)): #iterate over tracks\n","      for j in range(len(pproll.tracks[i].pianoroll)): #iterate over timesteps\n","        for k in range(48,72): #iterate over notes\n","            if pproll.tracks[i].pianoroll[j][k] != 0:\n","              pproll.tracks[i].pianoroll[j][k] = 1\n","              #print(k)\n","        if 1 not in pproll.tracks[i].pianoroll[j]:\n","            pproll.tracks[i].pianoroll[j][0] = 1 #TODO make this less sketchy, setting index 0 = 1 to represent no notes on\n","\n","\n","\n","    tuple_list.append(pproll)\n","\n","  if(counter == max_counter):\n","    break\n","  if (counter%100 == 0):\n","    print(counter)\n","  counter = counter+1\n","  \n","  print(tupleArr)\n","\n","#TAKE DATA ARRAY AND CHANGE THE NOTE RANGE\n","train_data=tupleArr\n","data_pairs= []\n","\n","\n","#for i in range(len(tupleArr[0][0].tracks[0].pianoroll)):\n","\n","for pair in train_data:\n","  tuple_list=[]\n","  #print(torch.argmax(torch.tensor(pair[0].tracks[0].pianoroll), dim = 1))\n","  #print(torch.argmax(torch.tensor(pair[1].tracks[0].pianoroll), dim = 1))\n","  assert(pair[0].tracks[0].pianoroll.shape[0]==pair[1].tracks[0].pianoroll.shape[0])\n","  time_steps= pair[0].tracks[0].pianoroll.shape[0]\n","\n","  input_matrix=np.zeros([time_steps+2,24+4])\n","  target_matrix=np.zeros([time_steps+2,24+4])\n","\n","  input_matrix[0][-2]=1 #index 26 for bos\n","  input_matrix[-1][-1]=1 #index 27 for eos\n","  target_matrix[0][-2]=1 #index 26 for bos\n","  target_matrix[-1][-1]=1 #index 27 for eos\n","\n","  for time_step in range(1,time_steps+1):\n","    input_matrix[time_step][0]=((pair[0].tracks[0].pianoroll)[time_step-1][0])\n","    input_matrix[time_step][1:-3]=((pair[0].tracks[0].pianoroll)[time_step-1][48:72])\n","    target_matrix[time_step][0]=((pair[1].tracks[0].pianoroll)[time_step-1][0])\n","    target_matrix[time_step][1:-3]=((pair[1].tracks[0].pianoroll)[time_step-1][48:72])\n","\n","\n","  #print(torch.argmax(torch.tensor(input_matrix), dim = 1))\n","  #print(torch.argmax(torch.tensor(target_matrix), dim = 1))\n","  reduced_time = int(time_steps/time_factor)\n","  eos_one_hot = np.zeros([1, 28])\n","  bos_one_hot = np.zeros([1, 28])\n","  eos_one_hot[0][-1] = 1\n","  bos_one_hot[0][-2] = 1\n","  #print(time_steps, reduced_time)\n","  input_matrix = np.concatenate((bos_one_hot, input_matrix[-reduced_time : ]))\n","  target_matrix = np.concatenate( (target_matrix[  : reduced_time], eos_one_hot))\n","  print(len(input_matrix), len(target_matrix))\n","  #print(torch.argmax(torch.tensor(input_matrix), dim = 1))\n","  #print(torch.argmax(torch.tensor(target_matrix), dim = 1))\n","  tuple_list.append(input_matrix)\n","  tuple_list.append(target_matrix)\n","  data_pairs.append(tuple(tuple_list))\n","'''"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"4w76ljWolKHf","colab_type":"code","colab":{}},"source":["#test case for data lengths\n","for pair in data_pairs:\n","   if (len(pair[0])!= len(pair[1])):\n","     assert('melody and melody extension are of different lengths')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ei00a97rradH","colab_type":"code","colab":{}},"source":["#DEBUGGING length of pianoroll mismatches between melody and extension\n","print(len(tupleArr))\n","bad_list = []\n","for i in range(len(tupleArr)):\n","    t = tupleArr[i]\n","    mel = t[0].tracks[0].pianoroll\n","    ext = t[1].tracks[0].pianoroll\n","    if (len(mel) != len(ext)):\n","        #print(i, len(mel), len(ext))\n","        #print(t[0].name, t[1].name)\n","        #print(len(mel), len(ext))\n","        \n","        bad_list.append(t[0].name)\n","        tupleArr.remove(tupleArr[i])\n","print(bad_list)\n","print(len(tupleArr), len(bad_list))"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"CkHxwVLtwWVI","colab_type":"code","colab":{}},"source":["#viewing consecutive sequences \n","'''\n","for t in tupleArr:\n","  mel = t[0].tracks[0].pianoroll\n","  ext = t[1].tracks[0].pianoroll\n","  print(\"**************************************************************\")\n","  print(torch.argmax(torch.tensor(mel), dim = 1))\n","  print(torch.argmax(torch.tensor(ext), dim = 1))\n","'''"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"nN2dpOYIJNXu","colab_type":"code","colab":{}},"source":["#DEBUGGING setting timestep of 0s to 1 \n","print(len(tupleArr))\n","tupleArr = tupleArr[0:10]\n","for i in range(len(tupleArr)):\n","    print(\"index\", i)\n","    t = tupleArr[i][0].tracks[0].pianoroll\n","    for j in t:\n","        for k in range(len(j)):\n","            if j[k] == 1 and k > 100 :\n","                print (k)\n","for t in tupleArr:\n","    tens = torch.tensor(t[0].tracks[0].pianoroll)\n","    print(\"original\", tens.shape)\n","    print(tens)\n","    amax = torch.argmax(tens, dim = 1)\n","    print(\"argmax\", amax.shape)\n","    print(amax)\n","    break\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wB3S_g2mpDyn","colab_type":"text"},"source":["#Loading and Changing Range Functions"]},{"cell_type":"code","metadata":{"id":"Vyz9ZIEEpHzm","colab_type":"code","colab":{}},"source":["import math\n","def load_to_tuple(begin_range=48,end_range=73, max_counter=20):\n","\n","\n","\n","  #Intialize directory path and sort the songs\n","  dir_path = \"drive/My Drive/Capstone - ECE496/single_note_random_split\"\n","  dir_files = os.listdir(dir_path)\n","  dir_files.sort()\n","  current_song=\"\"\n","\n","  #Redundant code but keeping just incase we want to convert later\n","  #time_factor = time_factor  # split to smaller second clips for testing overfitting capability of model\n","  max_counter =  max_counter #number of files to load\n","  counter=0\n","  begin_range=begin_range\n","  end_range=end_range\n","\n","  #contains an array of tuples(input, target)\n","  tupleArr=[]\n","  #print(\"right after intializing\",len(tupleArr))\n","  #contains a 2 element tuple, converted into tuple type later\n","  tuple_list=[]\n","\n","\n","\n","  for midi_file_num in dir_files:\n","    \n","    new_song = False\n","\n","    #checks if we are in a new song or current song\n","    if(current_song != midi_file_num.split(\".\")[0]):\n","      new_song = True\n","      current_song = midi_file_num.split(\".\")[0]\n","\n","    #gets the current song interval part  \n","    current_part = midi_file_num.split(\".\")[1]\n","\n","    #if in a new song, reset variables\n","    if new_song:\n","      index=0\n","      tuple_list=[]\n","\n","\n","    \n","    #add element to tuple\n","    pproll = None\n","    pproll = pypianoroll.parse(dir_path + \"/\" + midi_file_num)\n","    pproll.name = midi_file_num\n","    #to indicate timesteps with no note on\n","    for i in range(len(pproll.tracks)-1): #iterate over tracks\n","      for j in range(len(pproll.tracks[i].pianoroll)): #iterate over timesteps\n","        for k in range(0,128): #iterate over notes\n","          if pproll.tracks[i].pianoroll[j][k] != 0:\n","            if (k>=begin_range and k<=end_range):\n","              #print(\"time_step\",j,\"note\",k)\n","              pproll.tracks[i].pianoroll[j][k] = 1\n","            elif (k<begin_range):\n","              pproll.tracks[i].pianoroll[j][k]=0\n","              note=k+12*math.ceil((begin_range-k)/12)\n","              #print(\"time_step\",j,\"was\",k,\"now\",note)\n","              pproll.tracks[i].pianoroll[j][k]=1\n","            elif (k>end_range):\n","              pproll.tracks[i].pianoroll[j][k]=0\n","              note=k-12*math.ceil((k-end_range)/12)\n","              #print(\"time_step\",j,\"was\",k,\"now\",note)\n","              pproll.tracks[i].pianoroll[j][note]=1\n","\n","\n","        if (sum(pproll.tracks[i].pianoroll[j])==0): #this part sets index 0 to = 1 if no notes are being played\n","          #print(\"time_step\",j,\"note 0\")\n","          pproll.tracks[i].pianoroll[j][0] = 1 #TODO make this less sketchy, setting index 0 = 1 to represent no notes on\n","\n","    tuple_list.append(pproll)\n","\n","    #if tuple(input, target) complete, add to array of tuples, reset vars\n","    if(index != 1):\n","      index=index+1\n","    elif(index ==1):\n","\n","      #tuple has both input and target now\n","      t = tuple(tuple_list)\n","      tupleArr.append(t)\n","      #print(len(tupleArr))\n","      #print(\"...............................................................\")\n","      #reset and add initial element to tuple\n","      tuple_list = []\n","      pproll = None\n","      pproll = pypianoroll.parse(dir_path + \"/\" + midi_file_num)\n","      pproll.name = midi_file_num\n","      \n","      #to indicate timesteps with no note on\n","      for i in range(len(pproll.tracks)): #iterate over tracks\n","        for j in range(len(pproll.tracks[i].pianoroll)): #iterate over timesteps\n","          for k in range(0,128): #iterate over notes\n","              if pproll.tracks[i].pianoroll[j][k] != 0:\n","                if (k>=begin_range and k<=end_range):\n","                  pproll.tracks[i].pianoroll[j][k] = 1\n","                elif (k<begin_range):\n","                  note=k+12*math.ceil((begin_range-k)/12)\n","                  pproll.tracks[i].pianoroll[j][note]=1\n","                elif (k>end_range):\n","                  note=k-12*math.ceil((k-end_range)/12)\n","                  pproll.tracks[i].pianoroll[j][note]=1\n","          if 1 not in pproll.tracks[i].pianoroll[j]:\n","              pproll.tracks[i].pianoroll[j][0] = 1 #TODO make this less sketchy, setting index 0 = 1 to represent no notes on\n","\n","\n","\n","      tuple_list.append(pproll)\n","\n","    if(counter == max_counter):\n","      return(tupleArr)\n","      break\n","    #if (counter%100 == 0):\n","      #print(counter)\n","    counter = counter+1\n","\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_gyVYYunpLM4","colab_type":"code","outputId":"0e95e6ec-e1ce-411c-9a9c-356faa10d03c","executionInfo":{"status":"ok","timestamp":1582755325404,"user_tz":300,"elapsed":10935,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"source":["def convert_from_pproll_to_input(tupleArr,begin_note=48,end_note=73,time_factor=1):\n","  #TAKE DATA ARRAY AND CHANGE THE NOTE RANGE\n","  train_data=tupleArr\n","  data_pairs= []\n","  note_range=end_note-begin_note\n","  i=0\n","  for pair in train_data:\n","\n","    \n","\n","   #input matrix\n","    zero_count=0 #initialize zero count\n","    for timestep in range(len(pair[0].tracks[0].pianoroll)  ):\n","      if pair[0].tracks[0].pianoroll[timestep][0] != 0:\n","        zero_count = zero_count + 1\n","\n","    #check if the zero count (no notes played) is greater than 50%\n","    if zero_count > len(pair[0].tracks[0].pianoroll)/2:\n","      print('pair', i, 'input silence threshold', zero_count/len(pair[0].tracks[0].pianoroll) )\n","      continue      \n","\n","    #target matrix\n","    zero_count=0 #initialize zero count\n","    for timestep in range(len(pair[1].tracks[0].pianoroll ) ):\n","      if pair[1].tracks[0].pianoroll[timestep][0] != 0:\n","        zero_count = zero_count + 1\n","\n","    #check if the zero count (no notes played) is greater than 50%\n","    if zero_count > len(pair[1].tracks[0].pianoroll)/2:\n","      print('pair', i, 'extension silence threshold' ,zero_count/len(pair[1].tracks[0].pianoroll) )\n","      continue\n","\n","    \n","    \n","    tuple_list=[]\n","    if pair[0].tracks[0].pianoroll.shape[0]!=pair[1].tracks[0].pianoroll.shape[0] :\n","        print('pair ', i , \"dont match size\", pair[0].tracks[0].pianoroll.shape[0], pair[1].tracks[0].pianoroll.shape[0]       )\n","    else:\n","      \n","      time_steps= pair[0].tracks[0].pianoroll.shape[0]\n","      input_matrix=np.zeros([time_steps,note_range+1])\n","      target_matrix=np.zeros([time_steps,note_range+1])\n","      #input_matrix[0][-2]=1 #index 26 for bos\n","      #input_matrix[-1][-1]=1 #index 27 for eos\n","      #target_matrix[0][-2]=1 #index 26 for bos\n","      #target_matrix[-1][-1]=1 #index 27 for eos\n","\n","      for time_step in range(time_steps):\n","        #In the loading function we set the zeroth index of the piano roll to 1 if no note was being played so we take the value from the zeroth index \n","        input_matrix[time_step][0]=((pair[0].tracks[0].pianoroll)[time_step][0])\n","        #Take the values from the pianoroll  from the speified range\n","        input_matrix[time_step][1:note_range+1]=((pair[0].tracks[0].pianoroll)[time_step][begin_note:end_note])\n","        #print(np.argmax(((pair[0].tracks[0].pianoroll)[time_step][begin_note:end_note])))\n","        target_matrix[time_step][0]=((pair[1].tracks[0].pianoroll)[time_step-1][0])\n","        target_matrix[time_step][1:note_range+1]=((pair[1].tracks[0].pianoroll)[time_step][begin_note:end_note])\n","        \n","      reduced_time = int(time_steps/time_factor)\n","    \n","      #print(input_matrix.shape)\n","\n","      #print(np.argmax(input_matrix, axis=1))\n","      \n","      input_matrix = input_matrix[-reduced_time : ]\n","      target_matrix = target_matrix[  : reduced_time]\n","      #print(target_matrix)\n","      #print(\"test\",input_matrix.shape)\n","\n","      #print(len(input_matrix), len(target_matrix))\n","      #print(torch.argmax(torch.tensor(input_matrix), dim = 1))\n","      #print(torch.argmax(torch.tensor(target_matrix), dim = 1))\n","    #input_matrix = np.concatenate((bos_one_hot, input_matrix[-reduced_time : ]))\n","    #target_matrix = np.concatenate( (target_matrix[  : reduced_time], eos_one_hot))\n","\n","      tuple_list.append(input_matrix)\n","      tuple_list.append(target_matrix)\n","      data_pairs.append(tuple(tuple_list))\n","      #print(input_matrix.shape)\n","    # if (input_matrix.argmax()==125):\n","        #np.set_printoptions(threshold=sys.maxsize)\n","    i=i+1\n","  return data_pairs\n","\n","tupleArr=load_to_tuple()\n","dp = convert_from_pproll_to_input(tupleArr,begin_note=48,end_note=73,time_factor=1)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["pair 0 input silence threshold 0.7708333333333334\n","pair 0 input silence threshold 0.7708333333333334\n","pair 0 input silence threshold 0.7708333333333334\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"i0nWV3Bci3j4","colab_type":"code","outputId":"ca08eaed-a6ef-4114-d74e-912e72c9005f","executionInfo":{"status":"ok","timestamp":1580492506692,"user_tz":300,"elapsed":590,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["convert_from_pproll_to_input(tupleArr)\n"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.]])),\n"," (array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 1., 0.],\n","         [0., 0., 0., ..., 0., 1., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 1., 0.],\n","         [0., 0., 0., ..., 0., 1., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         ...,\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]])),\n"," (array([[0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [1., 0., 0., ..., 0., 0., 0.]]), array([[1., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.],\n","         ...,\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 1., 0., 0.],\n","         [0., 0., 0., ..., 0., 0., 0.]]))]"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"WtOxo8A38Ltx","colab_type":"text"},"source":["#Initializing the Model"]},{"cell_type":"code","metadata":{"id":"SPIq1RT8bk3Z","colab_type":"code","colab":{}},"source":["class SingleNoteRNN(nn.Module):\n","    def __init__(self, hidden_size, vocab_size = 26, n_layers = 1):\n","        super(SingleNoteRNN, self).__init__()\n","        self.vocab_size = vocab_size\n","        self.rnn = nn.GRU(vocab_size, hidden_size, n_layers, batch_first=True)\n","        self.decoder = nn.Linear(hidden_size, vocab_size)\n","        self.ReLU = nn.LeakyReLU()\n","    def forward(self, data, hidden = None):\n","        output, hidden = self.rnn(data, hidden) # get the next output and hidden state\n","        output = self.decoder(output)          # predict distribution over next tokens\n","        output           = self.ReLU(output)\n","        return output, hidden\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"xGFstSHjedMl","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"L-RZluLR8QaV","colab_type":"text"},"source":["#Training the Model"]},{"cell_type":"code","metadata":{"id":"ZWANHseiSWLA","colab_type":"code","colab":{}},"source":["# plotting\n","\n","def plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list):\n","  plt.title(\"Training Curve\")\n","  plt.plot(train_loss_list, label=\"Train\")\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Loss\")\n","  plt.show()\n","\n","  plt.title(\"Training Curve\")\n","  plt.plot( train_acc_list, label=\"Train\")\n","  plt.plot( val_acc_list, label=\"Validation\")\n","  plt.xlabel(\"Epoch\")\n","  plt.ylabel(\"Accuracy\")\n","  plt.legend(loc='best')\n","  plt.show()\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"hf0v9ILPxcmr","colab_type":"code","outputId":"1ea60289-de3f-49f7-f43e-de1968684bbb","executionInfo":{"status":"ok","timestamp":1578430307646,"user_tz":300,"elapsed":71880,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# #RECREATING INPUT (instead of creating extension of melody)\n","\n","# def train_SNRNN(model, train_data, val_data = None, epochs = 10, batch_size = 64, learning_rate = 1e-3):\n","#     train_loss_list, val_loss_list, train_acc_list, val_acc_list = [],[],[],[]\n","    \n","#     criterion = nn.CrossEntropyLoss() #.cuda()\n","#     optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay = 1e-5)\n","\n","#     for epoch in range(0, epochs):\n","#         epoch_time = time.time()\n","#         epoch_loss = 0\n","#         epoch_correct = 0\n","#         epoch_total = 0\n","#         for pair in train_data:\n","\n","#           input =  torch.tensor(pair[0]).unsqueeze(0).float()        \n","#           target = torch.argmax(input, dim=2)\n","#           target = target[:,1:]\n","#           #print(target.shape)\n","#           optimizer.zero_grad()\n","#           #print(target)\n","#           output, hidden = model(input[:,:-1])# input[:,:-1])\n","\n","#           out = output.reshape(1, input.shape[2], -1) #this seems sketchy, might be better to prevent this in preprocessing\n","\n","#           loss = criterion(out, target) # target[:,1:]\n","#           loss.backward()\n","#           optimizer.step()\n","#           #print(output.shape)\n","#           pred = torch.argmax(out, dim = 1)\n","\n","#           #accuracy \n","#           '''\n","#           for i in range(len(pred.reshape(-1))):\n","#               truth = int( target.reshape(-1)[i])\n","#               if int(pred.reshape(-1)[i]) == int( target.reshape(-1)[i]):\n","#                   epoch_correct +=1\n","#                  # print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","#               else:\n","#                   truth = int( target.reshape(-1)[i])\n","#                   #print(output[:, i])\n","#                   #print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","#           '''\n","#           # line below does the same thing as the above loop but cleaner, may need the loop later\n","#           epoch_correct += int((torch.eq(pred.reshape(-1), target.reshape(-1))).sum())\n","#           epoch_total += pred.shape[1]\n","#           if epoch == epochs -2:\n","#               print(\"pred\", pred)\n","#               print(\"target\", target)\n","#               print(\"\\n\")\n","#           epoch_loss += float(loss)\n","#         epoch_accuracy = (epoch_correct/epoch_total)*100\n","#         if (epoch%10 == 0):\n","#        # print(pred)\n","#           print(epoch, int(time.time()-epoch_time), \"s :loss:\", epoch_loss, \"accuracy\", epoch_accuracy)\n","#         train_loss_list.append(epoch_loss)\n","#         train_acc_list.append(epoch_accuracy)\n","\n","#     return train_loss_list, val_loss_list, train_acc_list, val_acc_list\n","\n","\n","# print(max_counter, 10/time_factor, \"second samples\")\n","# model = SingleNoteRNN(128)\n","# train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 1000, learning_rate = 1e-2)\n","# plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)\n","'''"],"execution_count":0,"outputs":[{"output_type":"stream","text":["10 0.25 second samples\n","0 0 s :loss: 28.751761436462402 accuracy 6.6115702479338845\n","10 0 s :loss: 11.805250823497772 accuracy 76.85950413223141\n","20 0 s :loss: 8.164802871644497 accuracy 76.03305785123968\n","30 0 s :loss: 5.728249091655016 accuracy 76.03305785123968\n","40 0 s :loss: 4.815683025866747 accuracy 75.20661157024794\n","50 0 s :loss: 3.9461561553180218 accuracy 82.64462809917356\n","60 0 s :loss: 5.330599471926689 accuracy 79.33884297520662\n","70 0 s :loss: 2.206097848713398 accuracy 90.9090909090909\n","80 0 s :loss: 1.3321754205971956 accuracy 94.21487603305785\n","90 0 s :loss: 0.8787026880308986 accuracy 98.34710743801654\n","100 0 s :loss: 0.17659633979201317 accuracy 100.0\n","110 0 s :loss: 0.09072053898125887 accuracy 100.0\n","120 0 s :loss: 0.0676045345608145 accuracy 100.0\n","130 0 s :loss: 0.05157406348735094 accuracy 100.0\n","140 0 s :loss: 0.04212138359434903 accuracy 100.0\n","150 0 s :loss: 0.03538138139992952 accuracy 100.0\n","160 0 s :loss: 0.030000396072864532 accuracy 100.0\n","170 0 s :loss: 0.026044889469631016 accuracy 100.0\n","180 0 s :loss: 0.022790979710407555 accuracy 100.0\n","190 0 s :loss: 0.020434564212337136 accuracy 100.0\n","200 0 s :loss: 0.018499414436519146 accuracy 100.0\n","210 0 s :loss: 0.01686290989164263 accuracy 100.0\n","220 0 s :loss: 0.01544593833386898 accuracy 100.0\n","230 0 s :loss: 0.014208679785951972 accuracy 100.0\n","240 0 s :loss: 0.013130270119290799 accuracy 100.0\n","250 0 s :loss: 0.012174958013929427 accuracy 100.0\n","260 0 s :loss: 0.011317565338686109 accuracy 100.0\n","270 0 s :loss: 0.010547813610173762 accuracy 100.0\n","280 0 s :loss: 0.009850541595369577 accuracy 100.0\n","290 0 s :loss: 0.009206028014887124 accuracy 100.0\n","300 0 s :loss: 0.008613122743554413 accuracy 100.0\n","310 0 s :loss: 0.008083196735242382 accuracy 100.0\n","320 0 s :loss: 0.007615038426592946 accuracy 100.0\n","330 0 s :loss: 0.007189974683569744 accuracy 100.0\n","340 0 s :loss: 0.006794272630941123 accuracy 100.0\n","350 0 s :loss: 0.0064298240467906 accuracy 100.0\n","360 0 s :loss: 0.006093509960919619 accuracy 100.0\n","370 0 s :loss: 0.00577573457849212 accuracy 100.0\n","380 0 s :loss: 0.005493221804499626 accuracy 100.0\n","390 0 s :loss: 0.005258707038592547 accuracy 100.0\n","400 0 s :loss: 0.005045409081503749 accuracy 100.0\n","410 0 s :loss: 0.0048497525858692825 accuracy 100.0\n","420 0 s :loss: 0.0046712747134733945 accuracy 100.0\n","430 0 s :loss: 0.004508576559601352 accuracy 100.0\n","440 0 s :loss: 0.00436130232992582 accuracy 100.0\n","450 0 s :loss: 0.004228904930641875 accuracy 100.0\n","460 0 s :loss: 0.00411663023987785 accuracy 100.0\n","470 0 s :loss: 0.004022322507807985 accuracy 100.0\n","480 0 s :loss: 0.003939673159038648 accuracy 100.0\n","490 0 s :loss: 0.00386168465774972 accuracy 100.0\n","500 0 s :loss: 0.0037922296760370955 accuracy 100.0\n","510 0 s :loss: 0.0037315700174076483 accuracy 100.0\n","520 0 s :loss: 0.003676496460684575 accuracy 100.0\n","530 0 s :loss: 0.00362887280061841 accuracy 100.0\n","540 0 s :loss: 0.0035779532772721723 accuracy 100.0\n","550 0 s :loss: 0.003526950240484439 accuracy 100.0\n","560 0 s :loss: 0.003475242221611552 accuracy 100.0\n","570 0 s :loss: 0.003419328073505312 accuracy 100.0\n","580 0 s :loss: 0.003358808724442497 accuracy 100.0\n","590 0 s :loss: 0.0032994664215948433 accuracy 100.0\n","600 0 s :loss: 0.003241985017666593 accuracy 100.0\n","610 0 s :loss: 0.00320249491778668 accuracy 100.0\n","620 0 s :loss: 12.712134167551994 accuracy 61.98347107438017\n","630 0 s :loss: 10.972765058279037 accuracy 76.85950413223141\n","640 0 s :loss: 9.823678091168404 accuracy 78.51239669421489\n","650 0 s :loss: 7.263335049152374 accuracy 85.9504132231405\n","660 0 s :loss: 6.333720080554485 accuracy 88.42975206611571\n","670 0 s :loss: 5.382694348692894 accuracy 89.25619834710744\n","680 0 s :loss: 5.9481306448578835 accuracy 89.25619834710744\n","690 0 s :loss: 5.563679955899715 accuracy 87.60330578512396\n","700 0 s :loss: 4.658177398145199 accuracy 90.08264462809917\n","710 0 s :loss: 2.022725608199835 accuracy 91.73553719008265\n","720 0 s :loss: 5.8140686973929405 accuracy 84.29752066115702\n","730 0 s :loss: 3.224812900647521 accuracy 86.77685950413223\n","740 0 s :loss: 2.684185888618231 accuracy 90.9090909090909\n","750 0 s :loss: 1.3374704364687204 accuracy 92.56198347107438\n","760 0 s :loss: 1.2845480479300022 accuracy 94.21487603305785\n","770 0 s :loss: 1.376762262545526 accuracy 93.38842975206612\n","780 0 s :loss: 1.8099004123359919 accuracy 91.73553719008265\n","790 0 s :loss: 1.1529737072996795 accuracy 92.56198347107438\n","800 0 s :loss: 1.084205357125029 accuracy 91.73553719008265\n","810 0 s :loss: 5.026979682967067 accuracy 81.81818181818183\n","820 0 s :loss: 2.5127643127925694 accuracy 91.73553719008265\n","830 0 s :loss: 4.151125108241104 accuracy 83.47107438016529\n","840 0 s :loss: 3.5148214981891215 accuracy 83.47107438016529\n","850 0 s :loss: 3.3071395091246814 accuracy 83.47107438016529\n","860 0 s :loss: 3.153702011797577 accuracy 85.12396694214877\n","870 0 s :loss: 2.968990424182266 accuracy 88.42975206611571\n","880 0 s :loss: 1.6510581674519926 accuracy 90.9090909090909\n","890 0 s :loss: 1.9232792188413441 accuracy 93.38842975206612\n","900 0 s :loss: 1.3487520783673972 accuracy 93.38842975206612\n","910 0 s :loss: 1.4827209718059748 accuracy 92.56198347107438\n","920 0 s :loss: 5.834564202697948 accuracy 89.25619834710744\n","930 0 s :loss: 3.585074598668143 accuracy 84.29752066115702\n","940 0 s :loss: 1.8666284177452326 accuracy 91.73553719008265\n","950 0 s :loss: 2.4301961082965136 accuracy 89.25619834710744\n","960 0 s :loss: 1.6850344121921808 accuracy 93.38842975206612\n","970 0 s :loss: 1.4277047779178247 accuracy 94.21487603305785\n","980 0 s :loss: 4.651505841873586 accuracy 81.81818181818183\n","990 0 s :loss: 6.483944356441498 accuracy 81.81818181818183\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[23,  0, 25, 23, 23,  0, 25, 19, 23, 25, 25, 23, 23, 24, 27]])\n","target tensor([[23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 27]])\n","\n","\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[23,  0, 23, 23,  0,  0, 23,  0,  0,  0,  0,  0, 26,  0, 26]])\n","target tensor([[23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n","pred tensor([[ 0,  0,  0,  0,  0,  0,  0, 27]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0, 27]])\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\nRK5CYII=\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"ZWkeMnuQb94u","colab_type":"code","outputId":"41e34560-5d11-41da-bb3a-b2a55a9630ec","executionInfo":{"status":"ok","timestamp":1579016536760,"user_tz":300,"elapsed":1163105,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"16423874305120709794"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["# #creating extension\n","\n","\n","# def train_SNRNN(model, train_data, val_data = None, epochs = 10, batch_size = 64, learning_rate = 1e-3):\n","#     train_loss_list, val_loss_list, train_acc_list, val_acc_list = [],[],[],[]\n","    \n","#     criterion = nn.CrossEntropyLoss() #.cuda()\n","#     optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay = 1e-5)\n","\n","#     for epoch in range(0, epochs):\n","#         epoch_time = time.time()\n","#         epoch_loss = 0\n","#         nonzero_correct = 0\n","#         zero_correct = 0\n","#         epoch_correct = 0\n","#         epoch_total = 0\n","#         nonzero_total = 0\n","#         zero_total = 0\n","#         for pair in train_data:\n","\n","#           length = len(pair[0])\n","#           input =  torch.tensor(pair[0]).unsqueeze(0).float()[:, :-1] \n","#           target = torch.tensor(pair[1]).unsqueeze(0).float()[:,1:]\n","#           combined_pair = torch.cat((input, target), 1) \n","#           target = torch.argmax(target, dim = 2)\n","#           optimizer.zero_grad()\n","\n"," \n","#           output, hidden = model(combined_pair) # input[:,:-1])\n","\n","  \n","#           out = output.reshape(1, combined_pair.shape[2], -1) [:, :, target.shape[1]:] \n","#           loss = criterion(out, target)\n","#           loss.backward()\n","#           optimizer.step()\n","#           pred = torch.argmax(out, dim = 1)\n","#           pred = pred.reshape(-1)\n","          \n","          \n","#           for i in range(len(pred)):\n","#               truth = int( target.reshape(-1)[i])\n","#               pred_i = pred[i]\n","#               if (truth != 0):\n","#                 nonzero_total += 1\n","#                 if pred_i == truth:\n","#                     nonzero_correct += 1\n","#                     epoch_correct += 1\n","#                   # print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","#                 #else:\n","#                     #print(output[:, i])\n","#                     #print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","#               else:\n","#                   zero_total +=1\n","#                   if pred_i == truth:\n","#                     zero_correct +=1\n","#                     epoch_correct+=1\n","#                   #else:\n","              \n","\n","#           #epoch_correct += int((torch.eq(pred.reshape(-1), target.reshape(-1))).sum())\n","#           epoch_total += pred.shape[0]\n","#           if epoch == epochs -2:\n","#               print(\"input\", torch.argmax(input, dim = 2))\n","#               print(\"target\", target)\n","#               print(\"combined\", torch.argmax(combined_pair, dim = 2))\n","#               print(\"pred\", pred)\n","#               print(\"\\n\")\n","              \n","#           epoch_loss += float(loss)\n","#         epoch_accuracy = (epoch_correct/epoch_total)*100\n","#         if (epoch%10 == 0):\n","#        # print(pred)\n","#           print(epoch, int(time.time()-epoch_time), \"s :loss:\", epoch_loss, \"accuracy\", epoch_accuracy)\n","#           print(\"zero accuracy\", (100*zero_correct)/zero_total, \"nonzero accuracy\", (nonzero_correct*100)/nonzero_total)\n","#         train_loss_list.append(epoch_loss)\n","#         train_acc_list.append(epoch_accuracy)\n","\n","#     return train_loss_list, val_loss_list, train_acc_list, val_acc_list\n","\n","\n","# print(max_counter, 10/time_factor, \"second samples\")\n","\n","# model = SingleNoteRNN(256)\n","# train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 200, learning_rate = 1e-3)\n","# plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["20 5.0 second samples\n","0 5 s :loss: 63.282944202423096 accuracy 8.843537414965986\n","zero accuracy 10.28252299605782 nonzero accuracy 4.757462686567164\n","10 5 s :loss: 39.74633175134659 accuracy 52.672497570456756\n","zero accuracy 70.79500657030223 nonzero accuracy 1.212686567164179\n","20 5 s :loss: 25.806483045220375 accuracy 74.02818270165209\n","zero accuracy 100.0 nonzero accuracy 0.2798507462686567\n","30 5 s :loss: 25.030555173754692 accuracy 74.34402332361516\n","zero accuracy 100.0 nonzero accuracy 1.492537313432836\n","40 5 s :loss: 24.82098300009966 accuracy 74.41690962099126\n","zero accuracy 100.0 nonzero accuracy 1.7723880597014925\n","50 5 s :loss: 24.67083130031824 accuracy 74.41690962099126\n","zero accuracy 100.0 nonzero accuracy 1.7723880597014925\n","60 5 s :loss: 24.577063240110874 accuracy 74.41690962099126\n","zero accuracy 100.0 nonzero accuracy 1.7723880597014925\n","70 5 s :loss: 24.69991397112608 accuracy 74.31972789115646\n","zero accuracy 100.0 nonzero accuracy 1.3992537313432836\n","80 6 s :loss: 24.489235781133175 accuracy 74.36831875607386\n","zero accuracy 100.0 nonzero accuracy 1.585820895522388\n","90 5 s :loss: 23.888868164271116 accuracy 74.56268221574344\n","zero accuracy 99.93429697766098 nonzero accuracy 2.5186567164179103\n","100 5 s :loss: 24.07730320841074 accuracy 74.48979591836735\n","zero accuracy 100.0 nonzero accuracy 2.0522388059701493\n","110 5 s :loss: 23.73674914985895 accuracy 74.46550048590865\n","zero accuracy 99.83574244415243 nonzero accuracy 2.425373134328358\n","120 5 s :loss: 23.67497379332781 accuracy 74.27113702623906\n","zero accuracy 99.70433639947437 nonzero accuracy 2.0522388059701493\n","130 5 s :loss: 24.001023042947054 accuracy 74.41690962099126\n","zero accuracy 100.0 nonzero accuracy 1.7723880597014925\n","140 5 s :loss: 23.518994756042957 accuracy 74.73275024295432\n","zero accuracy 99.90144546649145 nonzero accuracy 3.264925373134328\n","150 5 s :loss: 23.675554111599922 accuracy 74.27113702623906\n","zero accuracy 99.80289093298292 nonzero accuracy 1.7723880597014925\n","160 5 s :loss: 23.556129686534405 accuracy 74.41690962099126\n","zero accuracy 99.83574244415243 nonzero accuracy 2.2388059701492535\n","170 5 s :loss: 23.33585797995329 accuracy 74.41690962099126\n","zero accuracy 99.90144546649145 nonzero accuracy 2.0522388059701493\n","180 5 s :loss: 22.99886055290699 accuracy 75.21865889212827\n","zero accuracy 99.50722733245729 nonzero accuracy 6.25\n","190 5 s :loss: 23.7586241774261 accuracy 74.63556851311954\n","zero accuracy 99.5400788436268 nonzero accuracy 3.917910447761194\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0]])\n","target tensor([[23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 27]])\n","combined tensor([[26, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 11, 11, 11, 11, 11, 11,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,\n","         21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,  0, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","combined tensor([[26, 11, 11, 11, 11, 11, 11,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19,  0,  0,  0,  0,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\n","         11,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0, 21, 21, 21, 21, 21, 21,\n","         21, 21, 21, 21, 21,  0, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,\n","         23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 15, 15, 15, 15,  0,  0,  0,  0,  0,  0,  0, 10, 10, 10, 10, 10,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          7,  7,  7,  7,  7,  0,  0,  0,  0,  0,  0,  0, 12, 12, 12, 12, 12,  0,\n","          0,  0,  0,  0,  0,  0,  7,  7,  7,  7,  7,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  3,  3,  3,  0,\n","          0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,\n","          3,  3,  3,  3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,\n","         10, 10, 10, 10, 10,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26, 15, 15, 15, 15,  0,  0,  0,  0,  0,  0,  0, 10, 10, 10, 10, 10,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          7,  7,  7,  7,  7,  0,  0,  0,  0,  0,  0,  0, 12, 12, 12, 12, 12,  0,\n","          0,  0,  0,  0,  0,  0,  7,  7,  7,  7,  7,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  3,  3,  3,  3,  0,\n","          0,  0,  0,  0,  0,  0,  8,  8,  8,  8,  8,  0,  0,  0,  0,  0,  0,  0,\n","          3,  3,  3,  3,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5,  0,  0,  0,  0,  0,  0,  0,\n","         10, 10, 10, 10, 10,  0,  0,  0,  0,  0,  0,  0,  5,  5,  5,  5,  5,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         24, 24, 24, 24, 24,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[24, 24, 24, 24, 24,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","         24, 24, 24, 24, 24,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24,  0, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0, 12, 12, 12, 12, 15, 15,\n","         15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  0,\n","         12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n","         12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,\n","         15, 15, 15, 15, 15, 15,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n","         17, 17, 17, 17, 17,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n","         17, 17, 17, 17, 17,  0, 15, 15, 15, 15, 15,  0, 17, 17, 17, 17, 22, 22,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0, 17, 17, 17, 17, 17,  0,\n","         15, 15, 15, 15, 15,  0,  0,  0, 19, 19, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22, 27]])\n","combined tensor([[26, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19, 19, 19,  0,  0,  0,  0,  0, 12, 12, 12, 12, 15, 15,\n","         15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  0,\n","         12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,  0,\n","          0,  0,  0,  0,  0,  0, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n","         12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n","         12, 12, 12, 12, 12,  0, 15, 15, 15, 15, 15, 15,  0, 17, 17, 17, 17, 17,\n","         17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  0, 19, 19, 19, 19, 19, 19,\n","         19, 19, 19, 19, 19,  0, 17, 17, 17, 17, 17,  0, 15, 15, 15, 15, 15,  0,\n","         17, 17, 17, 17, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22,  0, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,  0,\n","         17, 17, 17, 17, 17,  0, 15, 15, 15, 15, 15,  0,  0,  0, 19, 19, 22, 22,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 27]])\n","pred tensor([10, 10, 10,  0,  0, 17, 17,  0, 10, 10, 10,  0,  0,  0,  0, 17, 10, 17,\n","        17, 17, 17, 17, 10, 10, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n","        17, 17, 17, 17, 17, 17,  0, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,\n","        17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,  0,  0,\n","        17, 17, 17, 17, 17, 17, 17, 17, 17,  9, 17,  9, 17, 17, 17, 17, 17, 17,\n","        17, 17, 17, 17, 17, 17, 17, 17, 17,  0, 17, 17, 17, 17, 17, 17, 17,  0,\n","        17, 17, 17, 17, 18, 18, 18, 18, 18,  0,  0,  0, 17, 17, 17, 17, 17,  0,\n","        17,  0, 18, 18, 18, 18, 18,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 17, 17, 17, 17,  0, 15, 15, 15, 15, 15,  0,  0,  0, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26, 17, 17, 17, 17,  0, 15, 15, 15, 15, 15,  0,  0,  0, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,\n","         14, 14, 14, 14, 14,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 22, 22, 22, 22, 22,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,\n","         24, 24, 24, 24, 24,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  0,\n","         20, 20, 20, 20, 20,  0, 20, 20, 20, 20, 20,  0, 20, 20, 20, 20, 20, 20,\n","         20, 20, 20, 20, 20,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0, 27]])\n","combined tensor([[26, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,\n","         22, 22, 22, 22, 22,  0, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20,\n","         20, 20, 20, 20, 20,  0, 20, 20, 20, 20, 20,  0, 20, 20, 20, 20, 20,  0,\n","         20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n","input tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0]])\n","target tensor([[ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 20, 20, 20, 20, 20,\n","         20, 20, 20, 20, 20, 27]])\n","combined tensor([[26,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","          0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 27]])\n","pred tensor([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n","         0,  0,  0,  0,  0, 27])\n","\n","\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAX4AAAEWCAYAAABhffzLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0\ndHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3deZxcZZno8d9TS++ddPaEJKRDCITI\nkoQ27AoDOoBKRBGIOAbEi+R6FWbcGPU6ckdn0PEqol7HKDKZGXYUgo6oGMPiKCGdlZAEEkJCOulO\nmmydTi+1PfePc051dXdVdXWnq7pP1/P9fPLpqlPb26crTz31nOe8r6gqxhhjikdgqAdgjDGmsCzw\nG2NMkbHAb4wxRcYCvzHGFBkL/MYYU2Qs8BtjTJGxwG9GNBEJikiriJw8mPc1xs8s8JthxQ283r+E\niLSnXL+pv8+nqnFVrVLVtwbzvgMhInNE5AkROSgiR0Vko4jcKSL2/9AUlL3hzLDiBt4qVa0C3gI+\nkLLtwZ73F5FQ4UfZfyIyG3gJ2AmcqaqjgRuBC4CKATyfL35vMzxZ4De+IiLfEJFHReRhETkGfExE\nLhCRl0TkiIg0ish9IhJ27x8SERWRWvf6f7q3PyMix0TkLyIys7/3dW+/SkRed7P3H4jIf4vIzRmG\n/o/A86r6RVVtBFDVrap6g6q2isgVIrKrx+/aICKXZvi9/979NjQ65f7vFJED3oeCiHxSRLaJyGH3\nd5h+grvfjBAW+I0fXQs8BIwGHgViwB3AeOAi4ErgU1ke/1HgfwNjcb5V/GN/7ysiE4HHgC+4r/sm\nsDDL81wBPJH91+pT6u/9HWAN8KEeY31MVWMi8mF3bIuACcBq97HGWOA3vvQnVf2VqiZUtV1V16jq\nalWNqepOYBnw7iyPf0JV61U1CjwIzBvAfd8PbFDVFe5t3wPezvI8Y4HGXH/BDLr93jiBfDGAe5zg\nBrqC++3AP6nqa6oaA74BLBSRqSc4BjMCWOA3frQn9Yp70PS/RKRJRFqA/4OThWfSlHK5DagawH1P\nSh2HOrMdNmR5nkPAlCy352JPj+uPA5eIyCTgMqBDVf/s3jYD+JFb/jqC86GUAKad4BjMCGCB3/hR\nzyllfwJsBk5V1VHA1wDJ8xgaSQmiIiJAtmz6D8CHs9x+nJSDvG6dflyP+3T7vVX1IPBH4CM4ZZ6H\nU27eA9yqqjUp/8pVdXWWMZgiYYHfjATVwFHguIicQfb6/mD5NbBARD7gBuk7cGrpmXwNuFRE/llE\nJgOIyGki8pCIVAHbgGoR+Wv3wPQ/AOEcxvEQsASn1p9aw/9X4Cvu/kBEakTkun7+jmaEssBvRoLP\n4QS/YzjZ/6P5fkFV3Y9TU/8ucBCYBawHOjPc/3Wc1s3TgC1u+eUxnBbPNlU9DHwGWA7sxSkNNaV7\nrh6eAuYCb6nqqymv97g7tsfd8tcm4K/7/5uakUhsIRZjTpyIBIF9wHWq+uJQj8eYbCzjN2aARORK\nt4RSitPyGQVeHuJhGdMnC/zGDNzFOGfiNuOUUa5V1bSlHmOGEyv1GGNMkbGM3xhjiowvJnoaP368\n1tbWDvUwjDHGV9auXfu2qvZqM/ZF4K+traW+vn6oh2GMMb4iIrvTbbdSjzHGFBkL/MYYU2Qs8Btj\nTJGxwG+MMUXGAr8xxhQZC/zGGFNkLPAbY0yR8UUfvzHGFNqBlg4eWbOHWDzBubVjOf+Usbz85iFm\njq9k2piKvp9gGLPAb8wIkUgonbEE5SXBoR4KsXiC/3qlkWdeaeKS08Zz03kzhnpIaUXjCe5buZ29\nh9v5zkfOoT0aZ/fBNuZMrmbpg+tYu/tw8r7hoBCNKxOrS3nsUxdQO74yb+M60hahLBykLJyfv6UF\nfjOiqSqReILOWIKI+y+eyD4x4djKEhT4yxsHef71A7ze1Mqk0WW0tEdpj8b55gfPZPak6uT9D7R0\nsGbXYRbMqGHK6PKsz72/pYO9R9qZN62GQKBrdchDxyNsa2ohkYB9R9rZ39LB6ZOrOX/WOEaVhdmw\n5wi/f7WJPYfbufXimcybXgPAz17cyc63j/Plq8/gjofX8+c3DnLzRbV86l2nUFNR0uv1WztjrNy6\nnyvOmMS6tw7z9IZ9XH32FC49bQJvNLfy9798hQPHOvmrORO59eKZvTJbVeW515tpONTGVWdNoT0S\n52h7lNrxlfzzb7by4va3+cnfnMu/Pv8GKzbsozwc5Hdbmpg8qozLz5iUfJ5oPMGaXYd4dW8L7zt7\nCifVlKOqvLTzEL/f0sQbzce56byTuez0ifx60z7eWTuW6WMrUFUeXbOHF7Y38/Vr3sHqnYf4j7/s\n5gtXns47a8cCzgfg5n1H2drYwnvnTmZMZe/9ANB0tIPPPLyONbuc4H75GZN4fO0ennutmQtOGcfa\n3Yf5zkfO4ZpzTuI3rzSy7q3DnDV1NP/8zDY++tOXePRTF9DU0sG3ntnGp949i0mjSnlq/T7uuGI2\no8u7L572WtMxggF4ramVB/77Tf7mghksmues1PmDldv5wR93EFflQ/OncuPCk/nEv62huizEd6+f\nx8KZY7O+pwbCF7Nz1tXVabFM2fB2ayfPvdbM3sPtdMbidMYSdESdn52xBLF4goQqquDEL++yojjb\nvL9pQpVEwvlPFk0o8UQi7WvG4srhtgjl4SCzJlRRGu770M/o8jCVJaHk+Dq8n9E4ndEEnbE4iFAa\nDFAaDlASDFASCiAC46tKmTtlFB3ROAePRzjSFmV8VSmVpUEOHY8QT/eeVDjaHuVYR4xAQAgFhIA4\nP0vDAcLBAEfboxw+HuFwm/Och9oiHG2PMpC3eECcfVlREuSMKaNoPtZJZWmIAy0diMAnLp7Jzubj\nvNZ0jM37jqIKInD6pGqmjalgVFmI1s4Yuw4e59SJVZw8tpIdB1p57rUDxBLKKROccsHR9ihH2iLs\nPtiWdhxVpSEWzBjDC683EwoI5SVB2iNxPn5BLfFEguV/cc7IH1MR5nBblAtOGcdLbx6kqiTEh8+d\nxoTqUj44fypTa5wPpPv/9Cb/+OstjCoL0dIRIxQQYgklHBTiCWV0eZh502v47zcOAvDu0yYQDjof\nUO2ROLsOtvHm28cz7q9RZSE6ogki8QR/957T+OQlM7nhJy/x2v5jzJtWwznTRzNpVBk//9Ob7Dva\nATj7+LLTJ7Lr4HFe3ddCeThITUWYxqMdnDS6jH1HO6gqDXHT+SeztfEYL7zeDMDE6lKaWzuTv8MN\nddOpqx3L/3tuBzubjyf335VnTmbK6DKaj3UiAjPHV3K8M85/vLSbjmicb157Jv9v1Rs0He3gWGeM\nc6bXsHHPES6ZPZ5//8RCnOWUu7y67yiLl73EqPIwR9ujtEXi3ZKJb157ZrdvODsOHOM933sh+T4s\nDweJxBN8/Zp30HCojZ+8sJMrzpjI+KpSHlmzB4CpNeUEA8Kew238cumFzD95TD/evV1EZK2q1vXa\nboH/xG3ee5T1b3V9JWzpiLH3SDvHOmIcPh5h75F2OqNx4qrJwJxQiCfUDc5KNKFE44luQSoUEMrC\nQUpDAUpDAcrCQYJuwBMBEUGAQAAEISCAt829PSAQDjqBMRiQtCuQBwLCmIowrZ0xdjYf7zMjTqjS\n0hHjeGcsOS5vnM7lAKUh5ytqZyxOJNaVcStORtsWiTuvLVBd5vwHAgi6QT2dUeVhRpWFUIVYQokn\nlFjCee5oLMHo8jBjKksYU1FCTUWYsZUl1JSHKXXHVuLux2Ag8wdbQpXmY510RuOcP2scdTPGUhLq\nuv8bza189Kcvsb+lkwnVpZw+qZpzZ4zholPH89LOg2zccyT5ty8LB5gxrpKtjS00H+vkpJpy3jt3\nEqdNruaX6xpojyYYVRZidHmYOZOrmTd9DCWhABOrS5k4qpRXGo7yn6vf4oXXm/noeSfz6ctOJR5X\nvvLUK/x2cxOxhPKRc6dxyWkT+MLjG1l66SzuvOI0tjW18L1nX2fVtmYi8QTTx5bzy6UXMaG6lK8+\n9QpPrd/HeTPHcsqESj57+Wz+sHU/r+9vJSjCxy+cwcTqMvYdaee7z77Oxj1Hkr97aTjA+KpS3n/2\nSZw5dRS/3dzEuKpSRpeH2bTnCJeePpFpY8pZ8sDLXDJ7PP+46ExEhAMtHfzgjzvY0tjCKw1HicQT\nnDO9htvfdQqzJlbxvWdfZ0tjCxOqSlk0fyofOddZw/5rKzaz/q0j/M/LZvHIy3tY/eYhpowuY8mF\ntSycOZb/sbyec6bX8C/Xnc0P/riDh19+i85YglkTKll66amcMqGS+//0Jqt3HuLt1k7GV5UQTyiH\n25z32llTR/O9G+Zx6sQqfru5idv/cy3zptfwi6UXsu6tw5w2qbpX5u7ZsOcIH/vZakaVhXj4tvNZ\nsWEfsXiCR+v3UFc7lh99dEHyvt/+7TZ+8sJO/vnasxhVHubCU8fxNz9bzcaGowBcO38q3/nIOQQD\nwq827uPxtQ3807VnMqaihMfr97DkwtpeHz65ssCfB6rK9/6wnR/+cTs9Y+XYyhJGl4cZVR5m2phy\nKsJBAiIEAk4wDrhBWUQIBsQNzkJVaYiLTh3PnMnVhIIjs+kqnlD2Hm6nqixETXmYQECS3xRGlYcG\n/CYvlI5onLZInLEZSgg9qfsNLZDhA22gY2g82kHtuApEhEgs0e0DyrNhzxEWL3uJ0yZV8eT/vIgl\nD7xMS0eMFZ++aNDG0pOqZvwbdkTjNBxuY9aEqn79nVWVjmj34xeRWIJwUJLPc/h4hFf3tXDeKWMJ\n9/i/E08owYCgqrS0xygvCXbbX14J6ZLTJiS/HfVl75F2ykIBxlWVJrf93aMbeP71ZtZ85QoCASGR\nUC759ipOm1TFA7csTN6vPRJnU8MRpowuZ/rY8ry95zMFfqvxn4CNDUe5b+V2rjnnJO66ak7yjVRR\nEqSixHZtJsGAcPK47rXjfB7IGmz9Hau439AGewwzUw4upgv6APOm1/DFK0/n7l9tYfehNnYdPM6C\nAZYNcpUtiJWFg5w6sTrj7dmes+dB656/85jKEi6ePT7t44Puh66IMLqidxYvIty48OR+jSndB8QF\ns8bxy/V7ef3AMeZMHsXqNw+x90g7X7zy9G73Ky8Jct4p4/r1eoPJotMJOHw8AsAtF9VyUo5ZgjGF\nVjfDOTi4cc8R9h5u59r504Z4RCPXBbOcYP7nHQeJxBLc/atXqSwJ8t65k4d4ZN1Z4D8BXp3asnsz\nnM2eVEUoIPx+SxMJhdpx/u5BH86mjalgxrgK7nlmG5F4gvFVpdx74/xh0WKbyiLWCWiLxACntGPM\ncOWUV6r447YDAMwYl7/+cwO3v3sWq7Yd4IJZ4/jwudMYVZb+APFQssB/AtqjTsY/3D7Njelp7pRR\nbGs6BljGn2+LF57M4n4eLyi0kdk2UiBdpR4L/GZ4m3vSKACqS0M5dyOZkcsC/wnwAn9ZyAK/Gd68\nwD9jfMWwb5c1+Ze3wC8ip4vIhpR/LSJyp4iMFZFnRWS7+zO/vWWDJBrvfdZreyRGeTg4qP3ZxuTD\n3Clu4Lf6viGPgV9VX1PVeao6DzgXaAOeBO4CVqrqbGCle31Y+/2rTZz19d9xyG3f9LRF4lbmMb5Q\nU1HChxdM4+ozpwz1UMwwUKiDu5cDb6jqbhFZBFzqbl8OPAd8qUDjGJDlf9lFRzTB/paObvXR9kjc\nDuwa3/i/158z1EMww0Shavw3Ag+7lyepaqN7uQmYlO4BInKbiNSLSH1zc3MhxphWw+E2/uxOWOV1\n8Xgs4zfG+FHeA7+IlADXAI/3vE2diYLSThakqstUtU5V6yZMmJDnUWb2i7V7kxOndUR6BP5onHI7\necsY4zOFyPivAtap6n73+n4RmQLg/jxQgDEM2H+9si9Z3umZ8bdHYlT4ZH4ZY4zxFCLwL6arzAPw\nNLDEvbwEWFGAMQzYwdYIp06sAqzUY4wZGfIa+EWkEngP8MuUzfcA7xGR7cAV7vVhqyMaZ4w7m197\npGfGbwd3jTH+k9cCtaoeB8b12HYQp8vHFzpiiYylHsv4jTF+ZGfuZhGNO+uzemuX9sz42yIxm5nT\nGOM7Fviz6HAzfG/5tV4Hd6NW6jHG+I8F/iw6os40DRUlzpqtqYE/EksQjat19RhjfMcCfxadsa5J\n2MpLgt36+L2yj2X8xhi/scCfhZfxl4YDlIeDydk4Adqi3iIsVuM3xviLBf4svBp/WThIeTjYrdRj\nc/EbY/zKAn8WXqmnNBRwSj3R3qUeC/zGGL+xwJ+FV+rJnvFbqccY4y8W+LPoVuopCXbr4/cWWreD\nu8YYv7HAn0VnzMv4A5SFg7RHu1bhslKPMcavLPBnkcz4Q26px83ywQ7uGmP8ywJ/Fqk1/oqSHjX+\nqPXxG2P8yQJ/Fl7GXxpySz3dTuCyPn5jjD9Z4M+iI9b94G5HSo3fK/WU25QNxhifscCfRad35m7I\nOXM3Ek8Qizvb2iNxSkMBggEZyiEaY0y/WeDPoiMWpyQUIBCQZGbv1fltLn5jjF9Z4M+iM5qgLOTs\norKSdIHf6vvGGP+xwJ9FRzROmZvpe9Mvd0TcUk80Zh09xhhfyveauzUi8oSIbBORrSJygYiMFZFn\nRWS7+3NMPsdwIjqicUrDzi4qT5vxW+A3xvhPvjP+7wO/VdU5wDnAVuAuYKWqzgZWuteHpY5ogrKQ\nE9zT1fito8cY40d5C/wiMhp4F3A/gKpGVPUIsAhY7t5tOfDBfI3hRHXGuko93k+vlz8aT1ASskqZ\nMcZ/8hm5ZgLNwAMisl5EfiYilcAkVW1079METEr3YBG5TUTqRaS+ubk5j8PMrCOaoKxXqcc5cSuR\nUAJirZzGGP/JZ+APAQuAH6vqfOA4Pco6qqqApnuwqi5T1TpVrZswYUIeh5lZR0rGnyz1uAd3Ywkl\nZD38xhgfymfgbwAaVHW1e/0JnA+C/SIyBcD9eSCPY0h6u7WT3QeP9+sxHdEEpW45p6LHwd14QglY\n4DfG+FDeAr+qNgF7ROR0d9PlwBbgaWCJu20JsCJfY0j1L799jaX/ua5fj+mMxintWeN3A39ClaCV\neowxPpTvM5A+AzwoIiXATuAWnA+bx0TkVmA3cH2exwDAsc4oLR3Rfj2mIxrv6uop8fr4uzL+YNAC\nvzHGf/Ia+FV1A1CX5qbL8/m66cTiSjyR9nBCRp2xroO73hm8bamB3zJ+Y4wPFU0/YjyhxPoZ+FPP\n3A0FA5QEA101flWboM0Y40tFE/hjCU3OrJmrjpSMH5wlGL05+hMJrJ3TGONLRRP4+5vxR+MJ4gml\nNNR1dm5FSSh5AlcskbB2TmOMLxVN4I8lEv2q8SfX203J+MtTll+MJ7B2TmOMLxVN4I8nlFg898Df\nGetab9dTGkop9agSLJq9Z4wZSYomdMUSSiyRe40/mfGnlHoCIiTU+fCwrh5jjF8VTeCPJ5SEOnPs\n5MJbX7c0pdQTCkqyXBRPKMFA0ew+Y8wIUjSRyyvz5HqAt6vG3z3jj3UL/IM8SGOMKYCiCV2pmXou\nOmNO4C9NmXo5FEjJ+NXm6jHG+FPRBH6vvp9rnd8r9aRm/MGUwJ+w2TmNMT5VNIHfC9i5dvZ4GX+m\nwB+zg7vGGJ8qnsCv/a3xexl/1y4KBoS4avIAsZV6jDF+VDyBP96/Gn+6dk6vxu99iFjGb4zxo6IJ\n/F6mH81xvp5MNf7UWT5tWmZjjB8VTeDvb1ePl/GndvUEA84JXMnAbxm/McaHiibwx5IHZXPM+DMc\n3I2llnqsxm+M8aGiCfyp3Ti56PTO3O2W8QdIJFIO7lrGb4zxoaIJ/Mk+/hzbOTticUpCgW6dOyE3\n4/c+PEJW4zfG+FBel14UkV3AMSAOxFS1TkTGAo8CtcAu4HpVPZzPccDAMv6yUPfPxYA4XT2W8Rtj\n/KwQGf9lqjpPVb21d+8CVqrqbGClez3vuubYybWrJ05pSn0f0rRzWo3fGONDQ1HqWQQsdy8vBz6Y\n7xdMJBQ3Vude6onGu528BU77ZiyR0tVjgd8Y40P5DvwK/F5E1orIbe62Sara6F5uAiale6CI3CYi\n9SJS39zcfEKDSC3v5FzqiSW6nbwFTvtmPGUlL2vnNMb4UV5r/MDFqrpXRCYCz4rIttQbVVVFJG0k\nVtVlwDKAurq63JfOSiM+gMDvZPw9Ar9X6rGM3xjjY3nN+FV1r/vzAPAksBDYLyJTANyfB/I5Buje\nu597jT/Ru9TjBn5vFS6bq8cY40d5C/wiUiki1d5l4L3AZuBpYIl7tyXAinyNwZOa8Uf70c7ZM+MP\nuZO0Jds5LfAbY3won6WeScCT4tTBQ8BDqvpbEVkDPCYitwK7gevzOAage3kn9ykbEoyrTJ/xx62d\n0xjjY3kL/Kq6EzgnzfaDwOX5et10BlLj70zTzulN2eBVi6zGb4zxo6I4c7dbV0+Os3Om7eoJCKoQ\ndSO/rblrjPGjoghd8fhAu3q67x6vph+NeYG/KHafMWaEKYrIldrV078TuLpn/F4XT8T91mB9/MYY\nPyqKwB/vdnA312mZe7dzehl/xM34LeE3xvhRn6FLRD4jImMKMZh86e+Zu9G4c3ZuaY8av9fF4wX+\nkEV+Y4wP5RK5JgFrROQxEblSxH/1jW5dPTmUepLr7WbK+ON2cNcY4199hi5V/SowG7gfuBnYLiL/\nJCKz8jy2QdPfjL8z1nu9XYCgG+m9262P3xjjRznlrKqqOBOqNQExYAzwhIh8O49jGzTxfk7ZkMz4\n00zSBl2lHuvjN8b4UZ8ncInIHcDHgbeBnwFfUNWoiASA7cAX8zvEE5da3sllyoYOb9nFPg7uWuA3\nxvhRLmfujgU+pKq7UzeqakJE3p+fYQ2ueD+nbPAy/l4Hd70+/rgFfmOMf+VS6nkGOORdEZFRInIe\ngKpuzdfABlP/a/x9HNyNWR+/Mca/cgn8PwZaU663utt8I97PKRu8Uk+6+fihq6vHpmU2xvhRLoFf\n3IO7gFPiIf8LuAyqgWf8GQJ/so/fAr8xxn9yCfw7ReSzIhJ2/90B7Mz3wAZT966e3A/upluIBayd\n0xjjb7kE/tuBC4G9QANwHnBb1kcMM6nVndgJtHP2PoHLAr8xxn/6LNm4yybeWICx5E1/J2nL1M4Z\nsFKPMWYEyKWPvwy4FXgHUOZtV9VP5HFcg6q/C7H0mfHH7OCuMca/cin1/AcwGfhr4HlgGnAsn4Ma\nbF6wLwkGTmzKBunRx281fmOMD+US+E9V1f8NHFfV5cD7cOr8ORGRoIisF5Ffu9dnishqEdkhIo+K\nSMnAhp47L+MvDQf6NWVDaSj9wV3L+I0xfpZL4I+6P4+IyJnAaGBiP17jDiD1RK9vAd9T1VOBwzhl\npLzysvzSUDC3KRticUpCgV6BPRTs3tVjNX5jjB/lEviXufPxfxV4GtiCE7z7JCLTcL4h/My9LsBf\nAU+4d1kOfLCfY+63eLyrPTOXds7OaIKyUO9dk5yP37p6jDE+lvXgrjsRW4uqHgZeAE7p5/PfizOJ\nW7V7fRxwRFVj7vUGYGo/n7PfujL+3Gr8HdE4pT3q+9C18ErE+viNMT6WNeN3z9Id0Oyb7gRuB1R1\n7QAff5uI1ItIfXNz80CeIimeUurJbcqG3gutQ+8av2X8xhg/yqXU8wcR+byITBeRsd6/HB53EXCN\niOwCHsEp8XwfqBER75vGNJwTw3pR1WWqWqeqdRMmTMjh5TLzsvyycO5dPT1bOSHNXD0W940xPpRL\n4L8B+DROqWet+6++rwep6t+r6jRVrcU5AeyPqnoTsAq4zr3bEmDFAMbdL6kZf67TMvds5YTuGX8w\nIPhwFUpjjMnpzN2Zg/yaXwIeEZFvAOtxlnTMq2QffyhAWyTWx72dM3f7KvVYD78xxq9yOXP34+m2\nq+q/5/oiqvoc8Jx7eSewMNfHDoZ4IkEoIISDktvB3VicypLeuyZ1rh6r7xtj/CqX6ZXfmXK5DLgc\nWAfkHPiHWiyhBANCMCA5z845rrKPjN8CvzHGp3Ip9Xwm9bqI1OAcrPWNeFwJBYRQIJCcbiGbzgzt\nnKkHd9P1+RtjjB8MJHodBwa77p9XXsYfCuaW8ffZ1WMZvzHGx3Kp8f8K8KJlAJgLPJbPQQ22eEIJ\nBQMEA5LblA0Z+vhTp2gIBizjN8b4Uy41/u+kXI4Bu1W1IU/jyYtkxp9jjb89QztnoFvgH9QhGmNM\nweQS+N8CGlW1A0BEykWkVlV35XVkg8jr6gnlMC1zPKG0ReJUlWbu6gGbktkY41+55K2PA6lHROPu\nNt9Izfj7WnqxtdPp868u6x34U+fmsSmZjTF+lUvgD6lqxLviXs77HPqDKZ7o6uqJ91Hjzxb4UzN+\nm5LZGONXuQT+ZhG5xrsiIouAt/M3pMGX2tXTV6mntcMJ/FWl4V63pXbyWMZvjPGrXGr8twMPisgP\n3esNQNqzeYcrp4/f6erpu9TjrDtTlSbjFxECAgm1Gr8xxr9yOYHrDeB8Ealyr7fmfVSDzMv4w4G+\nM/5jyYw//a4JBQI2ZYMxxtf6LPWIyD+JSI2qtqpqq4iMcSdY8414IkEoKAQDAVQhkSX4Z6vxQ1e5\nxwK/McavcqnxX6WqR7wr7mpcV+dvSIMvtcYPEM1S7mntI+O3wG+M8btcAn9QREq9KyJSDpRmuf+w\nE08oQZFkJ062k7i8jD9djR+6Ar4tu2iM8atcDu4+CKwUkQcAAW7GWSTdN1Jn5/SuZ9LiZfxppmWG\nrsBv7ZzGGL/K5eDut0RkI3AFzpw9vwNm5HtggymeUMrCgWSwjmXp5W/tiFFVGsrYrpnM+C3wG2N8\nKtcZZ/bjBP2P4KyduzVvI8oDJ+MPEHIn2MnW0tnaGc1Y34euTN/aOY0xfpUxwonIacBi99/bwKOA\nqOplBRrboEnO1ZNLxt8Zy1jfh67avh3cNcb4VbZSzzbgReD9qroDQET+tiCjGmTxBN1q/NkO7h5z\nSz2ZeJ1BFviNMX6VrdTzIaARWCUiPxWRy3EO7uZERMpE5GUR2Sgir4rI3e72mSKyWkR2iMijIpL3\neX+61tz1Sj3ZM/5MPfxg7ZzGGP/LGPhV9SlVvRGYA6wC7gQmisiPReS9OTx3J/BXqnoOMA+4UkTO\nB74FfE9VTwUOA7ee6C/Rlyrl5hIAABXbSURBVF5dPVmWX2ztI+P3avvWzmmM8as+D+6q6nFVfUhV\nPwBMA9YDX8rhcZoyvUPY/ac4B4efcLcvBz44kIH3R9fsnH23c+aa8Vs7pzHGr/q1jpSqHlbVZap6\neS73F5GgiGwADgDPAm8AR1Q15t6lAZia4bG3iUi9iNQ3Nzf3Z5i9xOLdu3r6rvH3npnTY6UeY4zf\n5XUBQVWNq+o8nG8KC3HKRrk+dpmq1qlq3YQJE05oHD0z/miGUk8ioX129YSsj98Y43MFWTnWnetn\nFXABUCMiXmSdBuzN9+vHEkow2DVXT6aM/3jEnaAtW40/2cc/yIM0xpgCyVvgF5EJIlLjXi4H3oNz\n4tcq4Dr3bkuAFfkag8fr6ulryoa+5umB1FKPrbZujPGnXObqGagpwHIRCeJ8wDymqr8WkS3AI+7U\nzuuB+/M4BiB1zV23nTPDCVx9zcwJqYF/kAdpjDEFkrfAr6qbgPlptu/EqfcXTLLGH/Qy/vQ1/mM5\nZPzeh4cd3DXG+FVR5K3JuXr6OHPXy/iz1fi9g7rWx2+M8auiCPxexh9MdvVkr/FXl2Vu5wxZH78x\nxudGfOBXVWchlpQpGzJl/Mc6Mi+07vEyfWvnNMb41YgP/F6Q797Vk6HGn8PBXZuW2RjjdyM+8Hut\nm8Fg39MyHzjWSUkokL2rx5ud0xr5jTE+NeIDf2rG39dCLDsOtHLK+MqsHTtepm8ZvzHGr0Z84E9m\n/IEAYTdLj2TI+LcfOMapE6uyPl/I5uoxxvjciA/8qRl/iZvxR2O9M/72SJyGw+3Mnlid9fmsndMY\n43cjPvB7ZZ1gQCgJuYE/zSRtbzS3okrOGb+1cxpj/GrEB/7UjN9r58wU+AFmT8oe+IM2O6cxxudG\nfOD3OniCKdMyR9KUerbvbyUYEGrHVWZ9PpuP3xjjdyM+8Ccz/qAg4tT50x3c3XGglRnjKpLloEyC\n1sdvjPG5ER/4U7t6AEpCgbSlnh3NrZw6IXuZB6yrxxjjfyM+8HsZv5ehh4PSq9QTTyi73j7e54Fd\n6KrtW+A3xvjViA/8nbE4AKVuCScc7J3xHzjWQSyhTBtT0efz2dKLxhi/G/GBvz3iBP7ykiDgBP5I\nj8DfeLQDgCmjy/p8Pu+bg7VzGmP8asQH/rZo98BfGgr0mpa5yQ38k3MJ/N5CLHZw1xjjUyM+8Hd4\nGX84JeN3yz+e/mT83ipeVuoxxvhVPhdbny4iq0Rki4i8KiJ3uNvHisizIrLd/TkmX2MAaHMDf4VX\n6glJr4y/8Ug75eEgo8szL8Di8aZqsDV3jTF+lc/wFQM+p6pzgfOBT4vIXOAuYKWqzgZWutfzpj3a\nPeMvSXNwt7Glgymjy5Acyjdd7ZwW+Y0x/pS36KWqjaq6zr18DNgKTAUWAcvduy0HPpivMUCGg7s9\n2jmbjnbkVN8HO4HLGON/BUlbRaQWmA+sBiapaqN7UxMwKcNjbhORehGpb25uHvBr98r4Q727egYU\n+C3hN8b4VN7Dl4hUAb8A7lTVltTbVFWBtJPjq+oyVa1T1boJEyYM+PXbInFKgoHkIiw9+/jjCaXJ\nLfXkImjTMhtjfC6vgV9EwjhB/0FV/aW7eb+ITHFvnwIcyOcYOqJxysJdv2ZJMEA01vVZ83ZrJ/GE\nMmV0eU7P5wX+kC29aIzxqXx29QhwP7BVVb+bctPTwBL38hJgRb7GANAWiVFR0rWGbrjHXD39aeUE\ny/iNMf6XeVXxE3cR8DfAKyKywd32ZeAe4DERuRXYDVyfxzHQHk0kD+yCM1dPZ8rB3cYj7UBuJ2+B\nTdJmjPG/vAV+Vf0TkCk6Xp6v1+2pPRJLHtiF3u2cXRl//0o9FviNMX414ntT2qPxbhl/z2mZm1o6\nKA0FGFPR98lbYO2cxhj/G/GBvy0ST561C15XT9fB3cajuZ+8BVbqMcb434gP/O2ROGXh7oE/0qPG\nn2t9H7oO6tpcPcYYvxr5gT/aPeMvCQqReALnFAIv48+tvg8wfayzPOPkUbl/WBhjzHCSz66eYaE9\nEu9+cNddkCWWUIIC+/tx8hbAGVNG8fo3rhr0cRpjTKEUR+DvUeMHiMQSHI/EiCW0X4HfGGP8rihK\nPeXh3oE/Gk/QeMRbgCX3Uo8xxvjdiA78kViCWEK7d/W4pZ5IPNHvs3aNMWYkGNGB35uZM7WrpzSZ\n8StNR52zdi3wG2OKycgO/MnVt1Ln6nHaMCOxBI0tHZQEA4ytLBmS8RljzFAY2YE/udB616/Zs8Y/\nuR8nbxljzEgwogN/WyQGQHk4JeNP6erpzwIsxhgzUozowN8R7b7sInT18UfjCRpb2jnJAr8xpsiM\n6D7+tmSNv/vsnACdyYzfWjmNKZRoNEpDQwMdHR1DPZQRpaysjGnTphEO5zbZ5IgO/MmF1tP08Tcf\n6yQaVyZWlw7J2IwpRg0NDVRXV1NbW2vH1gaJqnLw4EEaGhqYOXNmTo8Z0aWe9jSlnrC7ZOKh4xEA\nRpXn9glpjDlxHR0djBs3zoL+IBIRxo0b169vUSM78KfJ+L0a/0E38FeVjugvPcYMOxb0B19/9+mI\nDvzZavyHjncCMKrMAr8xprjkc7H1n4vIARHZnLJtrIg8KyLb3Z9j8vX6kP7M3XAy8DsZf3WZlXqM\nKRYHDx5k3rx5zJs3j8mTJzN16tTk9UgkktNz3HLLLbz22mt5Hml+5TPd/Tfgh8C/p2y7C1ipqveI\nyF3u9S/lawDtkTgBgdJQyglcXqmn1Qv8lvEbUyzGjRvHhg0bAPj6179OVVUVn//857vdR1VRVQKB\n9HnxAw88kPdx5ls+F1t/QURqe2xeBFzqXl4OPEc+A787M2dq/aukR8ZfZYHfmCFx969eZcu+lkF9\nzrknjeIfPvCOfj9ux44dXHPNNcyfP5/169fz7LPPcvfdd7Nu3Tra29u54YYb+NrXvgbAxRdfzA9/\n+EPOPPNMxo8fz+23384zzzxDRUUFK1asYOLEiYP6O+VDoWv8k1S10b3cBEzKdEcRuU1E6kWkvrm5\neUAv1haJU17SPbD3DPyW8RtjALZt28bf/u3fsmXLFqZOnco999xDfX09Gzdu5Nlnn2XLli29HnP0\n6FHe/e53s3HjRi644AJ+/vOfD8HI+2/Iop6qqoholtuXAcsA6urqMt4vm/ZIrNs8PdA1Sdvhtggl\noQCloWC6hxpj8mwgmXk+zZo1i7q6uuT1hx9+mPvvv59YLMa+ffvYsmULc+fO7faY8vJyrrrKWZHv\n3HPP5cUXXyzomAeq0IF/v4hMUdVGEZkCHMjni7VH41SEu/+K3sHdhEK1tXIaY1yVlZXJy9u3b+f7\n3/8+L7/8MjU1NXzsYx9L2ydfUtI1s28wGCQWixVkrCeq0KWep4El7uUlwIp8vlh7NEFZSfeMPhQQ\nvJK/lXmMMem0tLRQXV3NqFGjaGxs5He/+91QD2lQ5S3yicjDOAdyx4tIA/APwD3AYyJyK7AbuD5f\nrw/wbze/k0g80XNchIMBIrGEtXIaY9JasGABc+fOZc6cOcyYMYOLLrpoqIc0qER1QOXzgqqrq9P6\n+vpBe74z/+F3tHbGuHDWOB76H+cP2vMaY7LbunUrZ5xxxlAPY0RKt29FZK2q1vW874g+czcTb74e\nm67BGFOMijLwe/P1WKnHGFOMijLwe509dnDXGFOMijLwl1jgN8YUsaIM/JbxG2OKWVEGfqvxG2OK\nWVEGfuvqMaY4XXbZZb1Oxrr33ntZunRpxsdUVVUBsG/fPq677rq097n00kvpq+X83nvvpa2tLXn9\n6quv5siRI7kOfVAVaeC3Uo8xxWjx4sU88sgj3bY98sgjLF68uM/HnnTSSTzxxBMDfu2egf83v/kN\nNTU1A36+E1GUkc9KPcYMA8/cBU2vDO5zTj4Lrron483XXXcdX/3qV4lEIpSUlLBr1y727dvH/Pnz\nufzyyzl8+DDRaJRvfOMbLFq0qNtjd+3axfvf/342b95Me3s7t9xyCxs3bmTOnDm0t7cn77d06VLW\nrFlDe3s71113HXfffTf33Xcf+/bt47LLLmP8+PGsWrWK2tpa6uvrGT9+PN/97neTM3t+8pOf5M47\n72TXrl1cddVVXHzxxfz5z39m6tSprFixgvLy8hPeTUWZ8XtdPbbsojHFZezYsSxcuJBnnnkGcLL9\n66+/nvLycp588knWrVvHqlWr+NznPke2WQ1+/OMfU1FRwdatW7n77rtZu3Zt8rZvfvOb1NfXs2nT\nJp5//nk2bdrEZz/7WU466SRWrVrFqlWruj3X2rVreeCBB1i9ejUvvfQSP/3pT1m/fj3gTBb36U9/\nmldffZWamhp+8YtfDMp+KMrI55V6bBEWY4ZQlsw8n7xyz6JFi3jkkUe4//77UVW+/OUv88ILLxAI\nBNi7dy/79+9n8uTJaZ/jhRde4LOf/SwAZ599NmeffXbytscee4xly5YRi8VobGxky5Yt3W7v6U9/\n+hPXXnttcnbQD33oQ7z44otcc801zJw5k3nz5gHOtM+7du0alH1QlBl/2Eo9xhStRYsWsXLlStat\nW0dbWxvnnnsuDz74IM3Nzaxdu5YNGzYwadKktNMw9+XNN9/kO9/5DitXrmTTpk28733vG9DzeEpL\nS5OXB3Pa5+IM/EFnaubKEluExZhiU1VVxWWXXcYnPvGJ5EHdo0ePMnHiRMLhMKtWrWL37t1Zn+Nd\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"RcsChW3_PArm","colab_type":"text"},"source":["##final iteration of training code\n"]},{"cell_type":"code","metadata":{"id":"_B7qZPqCaSh6","colab_type":"code","colab":{}},"source":["#creating extension, with TEACHER FORCE (TRAIN) LOSS, TRAIN ACCURACY\n"," \n","def train_SNRNN(model, train_data, val_data = None, epochs = 10, batch_size = 64, learning_rate = 1e-3):\n","    train_loss_list, val_loss_list, train_acc_list, val_acc_list = [],[],[],[]\n","    \n","    criterion = nn.CrossEntropyLoss() #.cuda()\n","    optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay = 1e-5)\n","\n","    for epoch in range(0, epochs):\n","        epoch_time = time.time()\n","        epoch_loss = 0\n","        nonzero_correct = 0\n","        zero_correct = 0\n","        epoch_correct = 0\n","        epoch_total = 0\n","        nonzero_total = 0\n","        zero_total = 0\n","        nonzero_accuracy = 0\n","        for pair in train_data:\n","          length = len(pair[0])\n","\n","          input =  torch.tensor(pair[0]).unsqueeze(0).float()[:, :-1] \n","          target = torch.tensor(pair[1]).unsqueeze(0).float()[:,1:]\n","          combined_pair = torch.cat((input, target), 1) \n","          target = torch.argmax(target, dim = 2)\n","          optimizer.zero_grad()\n","\n","          output, hidden = model(combined_pair) # input[:,:-1])\n","\n","          '''  #OLD RESHAPE, WAS WRONG\n","          out = output.reshape(1, combined_pair.shape[2], -1) [:, :, target.shape[1]:]\n","          for i in range(0, target.shape[1]): #hardcode probability of 0 to be 0 if the truth is nonzero\n","              if  target[0,i] != 0:\n","                  out[0, 0, i] = 0\n","          loss = criterion(out, target)\n","          '''\n","\n","          out = output[:, target.shape[1]: , :] .reshape(-1, model.vocab_size)\n","          for i in range(0, target.shape[1]): #hardcode probability of 0 to be 0 if the truth is nonzero\n","              if  target[0,i] != 0:\n","                  out[i, 0] = 0\n","          loss = criterion(out, target.reshape(-1))\n","\n","          loss.backward()\n","          optimizer.step()\n","          pred = torch.argmax(out, dim = 1) #dim = 1 or dim = 0\n","          print(pred.shape)\n","          pred = pred.reshape(-1)\n","          \n","          for i in range(len(pred)):\n","              truth = int( target.reshape(-1)[i])\n","              pred_i = pred[i]\n","              if (truth != 0):\n","                nonzero_total += 1\n","                if pred_i == truth:\n","                    nonzero_correct += 1\n","                    epoch_correct += 1\n","                  # print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","                #else:\n","                    #print(output[:, i])\n","                    #print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","              else:\n","                  zero_total +=1\n","                  if pred_i == truth:\n","                    zero_correct +=1\n","                    epoch_correct+=1\n","                  #else:\n","          #epoch_correct += int((torch.eq(pred.reshape(-1), target.reshape(-1))).sum())\n","          epoch_total += pred.shape[0]\n","          \n","          if epoch == epochs -2:\n","              #print(\"input\", torch.argmax(input, dim = 2))\n","              print(\"target\", target)\n","              print(\"pred\", pred)\n","              #print(\"combined\", torch.argmax(combined_pair, dim = 2))\n","              \n","              print(\"\\n###########################################################################\")\n","            \n","          epoch_loss += float(loss)\n","        epoch_accuracy = (epoch_correct/epoch_total)*100\n","        if (epoch %1 == 0):\n","\n","          print(epoch, int(time.time()-epoch_time), \"s :loss:\", epoch_loss, \"accuracy\", epoch_accuracy)\n","          if(nonzero_total ==0):\n","            nonzero_accuracy = 0\n","          else:\n","            nonzero_accuracy = (nonzero_correct*100)/nonzero_total\n","          print(\"zero accuracy\", (100*zero_correct)/zero_total, \"nonzero accuracy\", nonzero_accuracy)\n","      \n","        train_loss_list.append(epoch_loss)\n","        train_acc_list.append(epoch_accuracy)\n","\n","    return train_loss_list, val_loss_list, train_acc_list, val_acc_list\n","\n","#print(max_counter, 10/time_factor, \"second samples\")\n","\n","#model = SingleNoteRNN(256)\n","#train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 1, learning_rate = 1e-2)\n","#plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"yYp7CMqGnJYe","colab_type":"text"},"source":["#New Forward Pass Training Function"]},{"cell_type":"code","metadata":{"id":"6HUBelStnNA-","colab_type":"code","colab":{}},"source":["#creating extension, with custom loss function\n","\n","def train_SNRNN_new(model, train_data, val_data = None, epochs = 10, batch_size = 64, learning_rate = 1e-3,use_cuda=True):\n","    train_loss_list, val_loss_list, train_acc_list, val_acc_list = [],[],[],[]\n","    \n","    criterion = nn.CrossEntropyLoss() #.cuda()\n","    optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay = 1e-5)\n","    final_ans=[]\n","    print(\"CUDA is {}\".format(use_cuda))\n","    for epoch in range(176, epochs):\n","        epoch_time = time.time()\n","        epoch_loss = 0\n","        nonzero_correct = 0\n","        zero_correct = 0\n","        epoch_correct = 0\n","        epoch_total = 0\n","        nonzero_total = 0\n","        zero_total = 0\n","        nonzero_accuracy = 0\n","        if use_cuda and torch.cuda.is_available():\n","          #train_data=train_data.cuda()\n","          #target_data=target_data.cuda()\n","          model=model.cuda()\n","          \n","        for pair in train_data:\n","          length = len(pair[0])\n","\n","          input =  torch.tensor(pair[0]).unsqueeze(0).float()[:, :-1] \n","          target = torch.tensor(pair[1]).unsqueeze(0).float()[:,1:]\n","          target = torch.argmax(target, dim = 2)\n","          \n","\n","          if use_cuda and torch.cuda.is_available():\n","            #print(\"in this loop\")\n","            input=input.cuda()\n","            target=target.cuda()\n","            model=model.cuda()\n","            \n","          optimizer.zero_grad()\n","\n","\n","          output, hidden = model(input) # input[:,:-1])\n","\n","          if use_cuda and torch.cuda.is_available():\n","            hdden=hidden.cuda()\n","          output, hiddden = output[0][-1], hidden[-1] #get the hidden state and the final note that reflect all of the input\n","          \n","          out=torch.zeros(target.size()[0],length-1,model.vocab_size)\n","        \n","        \n","        \n","          for i in range(0, length-1): #loop for the same time length as input to get cooresponding output notes by passing in one note at a time\n","            out[0][i]=output\n","            pred = torch.argmax(output) #get the prediction\n","            input = torch.zeros([1, 1, output.shape[0]]) #create a new one hot tensor as our next input note\n","            input[0][0][int(pred)] = 1\n","            if use_cuda and torch.cuda.is_available():\n","              input=input.cuda()\n","            output, hidden = model(input, hidden) #repeat what we did\n","            output, hiddden = output[0][-1], hidden[-1]\n","        \n","\n","\n","\n","          out = out.reshape(-1,26)\n","          if use_cuda and torch.cuda.is_available():\n","            out=out.cuda()\n","          loss = criterion(out, target.reshape(-1))\n","\n","          loss.backward()\n","          optimizer.step()\n","          pred = torch.argmax(out, dim = 1)\n","          pred = pred.reshape(-1)\n","          \n","          for i in range(len(pred)):\n","              truth = int( target.reshape(-1)[i])\n","              pred_i = pred[i]\n","              if (truth != 0):\n","                nonzero_total += 1\n","                if pred_i == truth:\n","                    nonzero_correct += 1\n","                    epoch_correct += 1\n","                  # print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","                #else:\n","                    #print(output[:, i])\n","                    #print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","              else:\n","                  zero_total +=1\n","                  if pred_i == truth:\n","                    zero_correct +=1\n","                    epoch_correct+=1\n","                  #else:\n","          #epoch_correct += int((torch.eq(pred.reshape(-1), target.reshape(-1))).sum())\n","          epoch_total += pred.shape[0]\n","          '''\n","          if epoch == epochs -2:\n","              print(\"input\", torch.argmax(input, dim = 2))\n","              print(\"target\", target)\n","              print(\"combined\", torch.argmax(combined_pair, dim = 2))\n","              print(\"pred\", pred)\n","              print(\"\\n\")\n","            '''\n","          epoch_loss += float(loss)\n","        epoch_accuracy = (epoch_correct/epoch_total)*100\n","        \n","        if (epoch%25 == 0):\n","           plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)\n","           torch.save(model.state_dict(), \"drive/My Drive/Capstone - ECE496/Model_Outputs/256_units_1000_data_new_train/256_units_1000_data_new_train_{}_epochs_cuda\".format(epoch))\n","\n","\n","        if (epoch%1 == 0):\n","       # print(pred)\n","          print(epoch, int(time.time()-epoch_time), \"s :loss:\", epoch_loss, \"accuracy\", epoch_accuracy)\n","          if(nonzero_total ==0):\n","            nonzero_accuracy = 0\n","          else:\n","            nonzero_accuracy = (nonzero_correct*100)/nonzero_total\n","          print(\"zero accuracy\", (100*zero_correct)/zero_total, \"nonzero accuracy\", nonzero_accuracy)\n","        train_loss_list.append(epoch_loss)\n","        train_acc_list.append(epoch_accuracy)\n","\n","    return train_loss_list, val_loss_list, train_acc_list, val_acc_list,final_ans\n","\n","\n","#print(max_counter, 10/time_factor, \"second samples\")\n","\n","#model = SingleNoteRNN(256)\n","#train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 1, learning_rate = 1e-2)\n","#plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"M_drHcNkkkP0","colab_type":"code","outputId":"991279fc-0df0-4e5b-f8f4-f7bfcd73084a","colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["#creating extension, with TEACHER FORCE (TRAIN) LOSS, TEST ACCURACY\n"," \n","def train_SNRNN(model, train_data, val_data = None, epochs = 10, batch_size = 64, learning_rate = 1e-3):\n","    train_loss_list, val_loss_list, train_acc_list, val_acc_list = [],[],[],[]\n","    \n","    criterion = nn.CrossEntropyLoss() #.cuda()\n","    optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay = 1e-5)\n","\n","    for epoch in range(0, epochs):\n","        epoch_time = time.time()\n","        epoch_loss = 0\n","        nonzero_correct = 0\n","        zero_correct = 0\n","        epoch_correct = 0\n","        epoch_total = 0\n","        nonzero_total = 0\n","        zero_total = 0\n","        nonzero_accuracy = 0\n","        for pair in train_data:\n","          length = len(pair[0])\n","\n","          input =  torch.tensor(pair[0]).unsqueeze(0).float()[:, :-1] \n","          target = torch.tensor(pair[1]).unsqueeze(0).float()[:,1:]\n","          combined_pair = torch.cat((input, target), 1) \n","          target = torch.argmax(target, dim = 2)\n","          optimizer.zero_grad()\n","\n","          output, hidden = model(combined_pair) # input[:,:-1])\n","\n","          out = output[:, target.shape[1]: , :] .reshape(-1, model.vocab_size)\n","          for i in range(0, target.shape[1]): #hardcode probability of 0 to be 0 if the truth is nonzero\n","              if  target[0,i] != 0:\n","                  out[i, 0] = 0\n","          loss = criterion(out, target.reshape(-1))\n","\n","          loss.backward()\n","          optimizer.step()\n","\n","################################################################################\n","          length = len(pair[0])\n","          input =  torch.tensor(pair[0]).unsqueeze(0).float()[:, :-1] \n","          target = torch.tensor(pair[1]).unsqueeze(0).float()[:,1:]\n","          target = torch.argmax(target, dim = 2)\n","          optimizer.zero_grad()\n","\n","          output, hidden = model(input) \n","          output, hiddden = output[0][-1], hidden[-1] #get the hidden state and the final note that reflect all of the input\n","          out=torch.zeros(target.size()[0],length-1,model.vocab_size)\n","        \n","        \n","        \n","          for i in range(0, length-1): #loop for the same time length as input to get cooresponding output notes by passing in one note at a time\n","            out[0][i]=output\n","            pred = torch.argmax(output) #get the prediction\n","            input = torch.zeros([1, 1, output.shape[0]]) #create a new one hot tensor as our next input note\n","            input[0][0][int(pred)] = 1\n","            output, hidden = model(input, hidden) #repeat what we did\n","            output, hiddden = output[0][-1], hidden[-1]\n","        \n","          out = out.reshape(-1,model.vocab_size)\n","\n","          loss = criterion(out, target.reshape(-1))\n","\n","          loss.backward()\n","          optimizer.step()\n","          pred = torch.argmax(out, dim = 1)\n","          pred = pred.reshape(-1)\n","\n","\n","\n","#################################################################################\n","          for i in range(len(pred)):\n","              truth = int( target.reshape(-1)[i])\n","              pred_i = pred[i]\n","              if (truth != 0):\n","                nonzero_total += 1\n","                if pred_i == truth:\n","                    nonzero_correct += 1\n","                    epoch_correct += 1\n","                  # print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","                #else:\n","                    #print(output[:, i])\n","                    #print(\"pred:\", int(pred.reshape(-1)[i]), \"truth:\", truth )\n","              else:\n","                  zero_total +=1\n","                  if pred_i == truth:\n","                    zero_correct +=1\n","                    epoch_correct+=1\n","                  #else:\n","          #epoch_correct += int((torch.eq(pred.reshape(-1), target.reshape(-1))).sum())\n","          epoch_total += pred.shape[0]\n","          \n","          if epoch == epochs -2:\n","              #print(\"input\", torch.argmax(input, dim = 2))\n","              print(\"target\", target)\n","              print(\"pred\", pred)\n","              #print(\"combined\", torch.argmax(combined_pair, dim = 2))\n","              \n","              print(\"\\n###########################################################################\")\n","            \n","          epoch_loss += float(loss)\n","        epoch_accuracy = (epoch_correct/epoch_total)*100\n","        if (epoch %1 == 0):\n","\n","          print(epoch, int(time.time()-epoch_time), \"s :loss:\", epoch_loss, \"accuracy\", epoch_accuracy)\n","          if(nonzero_total ==0):\n","            nonzero_accuracy = 0\n","          else:\n","            nonzero_accuracy = (nonzero_correct*100)/nonzero_total\n","          print(\"zero accuracy\", (100*zero_correct)/zero_total, \"nonzero accuracy\", nonzero_accuracy)\n","      \n","        train_loss_list.append(epoch_loss)\n","        train_acc_list.append(epoch_accuracy)\n","\n","    return train_loss_list, val_loss_list, train_acc_list, val_acc_list\n","\n","\n","tup = load_to_tuple(begin_range=48,end_range=73,max_counter=2000)\n","print(len(tup))\n","data_pairs = convert_from_pproll_to_input(tup, begin_note=48,end_note=73, time_factor = 1)\n","model = SingleNoteRNN(256)\n","train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 100, learning_rate = 1e-2)\n","plot_curves(train_loss_list, val_loss_list,  train_acc_list, val_acc_list)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["1933\n","pair 0 input silence threshold 0.7708333333333334\n","pair 0 input silence threshold 0.7708333333333334\n","pair 0 input silence threshold 0.7708333333333334\n","pair 18 extension silence threshold 0.8375\n","pair 18 input silence threshold 0.8375\n","pair 20 extension silence threshold 0.6541666666666667\n","pair 20 input silence threshold 0.6541666666666667\n","pair 29 extension silence threshold 0.5166666666666667\n","pair 29 input silence threshold 0.5166666666666667\n","pair 117 extension silence threshold 0.6541666666666667\n","pair 117 input silence threshold 0.6541666666666667\n","pair  204 dont match size 240 216\n","pair  205 dont match size 216 240\n","pair 206 extension silence threshold 0.6666666666666666\n","pair 206 input silence threshold 0.6666666666666666\n","pair 206 input silence threshold 0.7083333333333334\n","pair 207 extension silence threshold 0.6583333333333333\n","pair 207 input silence threshold 0.6583333333333333\n","pair 207 input silence threshold 0.5125\n","pair 207 input silence threshold 0.5535714285714286\n","pair 211 extension silence threshold 0.5375\n","pair 211 input silence threshold 0.5375\n","pair 211 input silence threshold 0.7291666666666666\n","pair 211 input silence threshold 0.6666666666666666\n","pair 211 input silence threshold 0.7083333333333334\n","pair 211 input silence threshold 0.5166666666666667\n","pair 211 input silence threshold 0.6\n","pair 211 input silence threshold 0.5083333333333333\n","pair 211 input silence threshold 0.6541666666666667\n","pair 211 input silence threshold 0.5125\n","pair 211 input silence threshold 0.625\n","pair  212 dont match size 240 168\n","pair  213 dont match size 168 240\n","pair 215 extension silence threshold 0.5925925925925926\n","pair 215 input silence threshold 0.5925925925925926\n","pair 215 input silence threshold 0.625\n","pair 249 input silence threshold 0.6125\n","pair 250 extension silence threshold 0.5166666666666667\n","pair 250 input silence threshold 0.5166666666666667\n","pair 250 input silence threshold 0.5166666666666667\n","pair 250 extension silence threshold 0.7208333333333333\n","pair 250 input silence threshold 0.7208333333333333\n","pair 251 extension silence threshold 0.6166666666666667\n","pair 251 input silence threshold 0.6166666666666667\n","pair 251 extension silence threshold 0.625\n","pair 251 input silence threshold 0.625\n","pair  256 dont match size 240 216\n","pair  257 dont match size 216 240\n","pair 258 extension silence threshold 0.5041666666666667\n","pair 258 input silence threshold 0.5041666666666667\n","pair 259 extension silence threshold 0.6291666666666667\n","pair 262 extension silence threshold 0.525\n","pair 262 input silence threshold 0.525\n","pair 265 extension silence threshold 0.5416666666666666\n","pair 265 input silence threshold 0.5416666666666666\n","pair 268 extension silence threshold 0.5958333333333333\n","pair 268 input silence threshold 0.5958333333333333\n","pair 269 extension silence threshold 0.5458333333333333\n","pair 269 input silence threshold 0.5458333333333333\n","pair 271 extension silence threshold 0.5916666666666667\n","pair 271 input silence threshold 0.5916666666666667\n","pair 275 extension silence threshold 0.5833333333333334\n","pair 275 input silence threshold 0.5833333333333334\n","pair 276 extension silence threshold 0.575\n","pair 276 input silence threshold 0.575\n","pair 276 input silence threshold 0.6333333333333333\n","pair 276 input silence threshold 0.5875\n","pair 276 extension silence threshold 0.6791666666666667\n","pair 276 input silence threshold 0.6791666666666667\n","pair 285 extension silence threshold 0.5875\n","pair 285 input silence threshold 0.5875\n","pair 294 extension silence threshold 0.5458333333333333\n","pair 294 input silence threshold 0.5458333333333333\n","pair 342 input silence threshold 0.8\n","pair 356 input silence threshold 0.6333333333333333\n","pair  360 dont match size 240 216\n","pair  361 dont match size 216 240\n","pair 362 extension silence threshold 0.5416666666666666\n","pair 362 input silence threshold 0.5416666666666666\n","pair  368 dont match size 240 192\n","pair  369 dont match size 192 240\n","pair 372 extension silence threshold 0.6333333333333333\n","pair 372 input silence threshold 0.6333333333333333\n","pair 383 extension silence threshold 0.5416666666666666\n","pair 383 input silence threshold 0.5416666666666666\n","pair  386 dont match size 240 216\n","pair  387 dont match size 216 240\n","pair 497 extension silence threshold 0.625\n","pair 497 input silence threshold 0.625\n","pair  502 dont match size 240 168\n","pair  503 dont match size 168 240\n","pair 534 extension silence threshold 0.5791666666666667\n","pair 534 input silence threshold 0.5791666666666667\n","pair 551 input silence threshold 0.5333333333333333\n","pair 605 input silence threshold 0.525\n","pair 683 input silence threshold 0.6291666666666667\n","pair 683 extension silence threshold 0.5875\n","pair 683 input silence threshold 0.5875\n","pair  698 dont match size 240 192\n","pair  699 dont match size 192 240\n","pair 712 extension silence threshold 0.6388888888888888\n","pair 712 input silence threshold 0.6388888888888888\n","pair  802 dont match size 240 216\n","pair 803 extension silence threshold 0.825\n","pair 803 input silence threshold 0.825\n","pair 833 extension silence threshold 0.725\n","pair 833 input silence threshold 0.725\n","pair 833 input silence threshold 0.55\n","pair 834 extension silence threshold 0.625\n","pair 834 input silence threshold 0.625\n","pair 843 extension silence threshold 0.8083333333333333\n","pair 843 input silence threshold 0.8083333333333333\n","pair 843 extension silence threshold 0.5833333333333334\n","pair 843 input silence threshold 0.5833333333333334\n","pair 844 extension silence threshold 0.8166666666666667\n","pair 844 input silence threshold 0.8166666666666667\n","pair 844 input silence threshold 0.5375\n","pair 844 extension silence threshold 0.6333333333333333\n","pair 844 input silence threshold 0.6333333333333333\n","pair 853 extension silence threshold 0.8166666666666667\n","pair 853 input silence threshold 0.8166666666666667\n","pair 859 extension silence threshold 0.6333333333333333\n","pair 859 input silence threshold 0.6333333333333333\n","pair 861 extension silence threshold 0.5333333333333333\n","pair 861 input silence threshold 0.5333333333333333\n","pair 863 extension silence threshold 0.8166666666666667\n","pair 876 extension silence threshold 0.5458333333333333\n","pair 876 input silence threshold 0.5458333333333333\n","pair 876 extension silence threshold 0.5833333333333334\n","pair 876 input silence threshold 0.5833333333333334\n","pair 885 extension silence threshold 0.5541666666666667\n","pair 885 input silence threshold 0.5541666666666667\n","pair 897 extension silence threshold 0.5166666666666667\n","pair 897 input silence threshold 0.5166666666666667\n","pair 937 extension silence threshold 0.5416666666666666\n","pair 937 input silence threshold 0.5416666666666666\n","pair  974 dont match size 240 216\n","pair 975 extension silence threshold 0.5375\n","pair 975 input silence threshold 0.5375\n","pair 1012 input silence threshold 0.8166666666666667\n","pair 1084 extension silence threshold 0.5416666666666666\n","pair 1084 input silence threshold 0.5416666666666666\n","pair 1084 input silence threshold 0.725\n","pair 1122 extension silence threshold 0.5416666666666666\n","pair 1122 input silence threshold 0.5416666666666666\n","pair 1143 extension silence threshold 0.7208333333333333\n","pair 1143 input silence threshold 0.7208333333333333\n","pair 1198 extension silence threshold 0.8166666666666667\n","pair 1198 input silence threshold 0.8166666666666667\n","pair 1235 extension silence threshold 0.5416666666666666\n","pair 1235 input silence threshold 0.5416666666666666\n","pair 1272 extension silence threshold 0.5291666666666667\n","pair 1272 input silence threshold 0.5291666666666667\n","pair 1341 input silence threshold 0.6166666666666667\n","pair 1348 extension silence threshold 0.5041666666666667\n","pair 1348 input silence threshold 0.5041666666666667\n","pair  1392 dont match size 240 192\n","pair  1393 dont match size 192 240\n","pair 1420 input silence threshold 0.85\n","pair 1420 input silence threshold 0.6291666666666667\n","pair 1432 extension silence threshold 0.5416666666666666\n","pair 1432 input silence threshold 0.5416666666666666\n","pair 1432 input silence threshold 0.5833333333333334\n","pair 1433 extension silence threshold 0.5833333333333334\n","pair 1433 input silence threshold 0.5833333333333334\n","pair 1498 extension silence threshold 0.5458333333333333\n","pair 1498 input silence threshold 0.5458333333333333\n","pair 1504 extension silence threshold 0.5083333333333333\n","pair 1504 input silence threshold 0.5083333333333333\n","pair 1510 extension silence threshold 0.5375\n","pair 1510 input silence threshold 0.5375\n","pair 1540 input silence threshold 0.5757575757575758\n","pair 1540 input silence threshold 0.7083333333333334\n","pair 1540 input silence threshold 0.6439393939393939\n","pair 1540 extension silence threshold 0.5151515151515151\n","pair 1540 input silence threshold 0.5151515151515151\n","pair 1580 extension silence threshold 0.5541666666666667\n","pair 1580 input silence threshold 0.5541666666666667\n","pair 1592 extension silence threshold 0.8\n","pair 1592 input silence threshold 0.8\n","pair 1597 extension silence threshold 0.5416666666666666\n","pair 1597 input silence threshold 0.5416666666666666\n","pair  1614 dont match size 240 216\n","pair  1615 dont match size 216 240\n","pair 1633 extension silence threshold 0.8333333333333334\n","pair 1633 input silence threshold 0.8333333333333334\n","pair  1646 dont match size 216 240\n","0 1643 s :loss: 4901.82868039608 accuracy 13.36112508684923\n","zero accuracy 52.97503914525191 nonzero accuracy 8.760783181178835\n","1 1675 s :loss: 4907.728119075298 accuracy 12.808883777761807\n","zero accuracy 49.50953302017132 nonzero accuracy 8.546857702119466\n","2 1685 s :loss: 4991.205549478531 accuracy 13.530511032846979\n","zero accuracy 75.00230266187712 nonzero accuracy 6.391825907445141\n","3 1686 s :loss: 4848.066493034363 accuracy 15.46347540669398\n","zero accuracy 58.644192686745875 nonzero accuracy 10.448922617806087\n","4 1673 s :loss: 4840.1291381418705 accuracy 14.801504588035172\n","zero accuracy 70.26342451874366 nonzero accuracy 8.360742535337815\n","5 1674 s :loss: 4916.217822909355 accuracy 15.556434030523011\n","zero accuracy 62.35608363267938 nonzero accuracy 10.121616634845251\n","6 1679 s :loss: 4809.932945013046 accuracy 15.69227820503606\n","zero accuracy 62.80049737496546 nonzero accuracy 10.221626796305507\n","7 1663 s :loss: 4827.876296877861 accuracy 16.57011428160713\n","zero accuracy 57.31095145988763 nonzero accuracy 11.838903417994342\n","8 1625 s :loss: 4927.388639688492 accuracy 16.768010733366875\n","zero accuracy 60.46559823155568 nonzero accuracy 11.69343409223397\n","9 1649 s :loss: 4847.463267982006 accuracy 16.192769352404227\n","zero accuracy 55.72672008842222 nonzero accuracy 11.601713543087266\n","10 1664 s :loss: 6000.924321711063 accuracy 17.337262512278684\n","zero accuracy 45.21506861932394 nonzero accuracy 14.099828324803054\n","11 1626 s :loss: 5051.815342545509 accuracy 16.195644361388627\n","zero accuracy 42.15252832274109 nonzero accuracy 13.181285799091887\n","12 1627 s :loss: 4820.483664870262 accuracy 15.709288674860442\n","zero accuracy 52.82997144699272 nonzero accuracy 11.398484337980864\n","13 1620 s :loss: 4908.3396228551865 accuracy 16.845635975945758\n","zero accuracy 45.502901353965186 nonzero accuracy 13.517683614912745\n","14 1629 s :loss: 4816.539508938789 accuracy 16.54759337789597\n","zero accuracy 49.504927696417056 nonzero accuracy 12.720276391718945\n","15 1624 s :loss: 5108.771898925304 accuracy 15.96468530630825\n","zero accuracy 50.23256884959012 nonzero accuracy 11.985174964301185\n","16 1608 s :loss: 5012.0925488471985 accuracy 14.136898344473995\n","zero accuracy 64.92585428755642 nonzero accuracy 8.238805012273975\n","17 1632 s :loss: 5098.8841416835785 accuracy 14.690097989889553\n","zero accuracy 57.43068987749839 nonzero accuracy 9.72665671913189\n","18 1644 s :loss: 4976.453373044729 accuracy 16.21241524713098\n","zero accuracy 60.14552823063461 nonzero accuracy 11.110487161797188\n","19 1650 s :loss: 5005.579514503479 accuracy 14.246388269963346\n","zero accuracy 64.89131435939946 nonzero accuracy 8.365021044919002\n","20 1649 s :loss: 5229.612425982952 accuracy 15.323079134622294\n","zero accuracy 65.76632587270885 nonzero accuracy 9.465132820981811\n","21 1637 s :loss: 5006.24077963829 accuracy 13.903303864491242\n","zero accuracy 55.130330662245555 nonzero accuracy 9.115632069568566\n","22 1653 s :loss: 4984.2024112939835 accuracy 16.186060998107283\n","zero accuracy 41.97522335820208 nonzero accuracy 13.191179852498383\n","23 1681 s :loss: 4783.297804057598 accuracy 12.586549749634635\n","zero accuracy 73.17629179331307 nonzero accuracy 5.550296554195346\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_3F4qwpDojBO","colab_type":"code","colab":{}},"source":["tup = load_to_tuple(begin_range=48,end_range=73,max_counter=1000)\n","print(len(tup))\n","data_pairs = convert_from_pproll_to_input(tup, begin_note=48,end_note=73, time_factor = 1)\n","#print(data_pairs)\n","print('loaded data', len(data_pairs))\n","print(len(data_pairs[0][0]))\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"5j2MdOOQ8Z9J","colab_type":"code","colab":{}},"source":["model = SingleNoteRNN(128)\n","train_loss_list, val_loss_list, train_acc_list, val_acc_list = train_SNRNN(model, data_pairs, epochs = 100, learning_rate = 1e-3)\n"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NYKgMdRw5lTG","colab_type":"text"},"source":["#Convert Output To Midi\n"]},{"cell_type":"code","metadata":{"id":"04tCK_oK-qE0","colab_type":"code","outputId":"fdba5a41-ba42-4fc3-b833-57352b242522","executionInfo":{"status":"ok","timestamp":1582322787589,"user_tz":300,"elapsed":3264,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":377}},"source":["def forward_pass(input, model):\n","  #format the input\n","  full_input =  torch.tensor(input).unsqueeze(0).float()[:, :-1]\n","  song_length = input.shape[0]\n","\n","  output, hidden = model(full_input)\n","\n","  output, hiddden = output[0][-1], hidden[-1] #get the hidden state and the final note that reflect all of the input\n","\n","  pred_list = []\n","  for i in range(0, song_length): #loop for the same time length as input to get cooresponding output notes by passing in one note at a time\n","    pred = torch.argmax(output) #get the prediction\n","    pred_list.append(int(pred))\n","    input = torch.zeros([1, 1, output.shape[0]]) #create a new one hot tensor as our next input note\n","    input[0][0][int(pred)] = 1\n","    output, hidden = model(input, hidden) #repeat what we did\n","    output, hiddden = output[0][-1], hidden[-1]\n","  print(pred_list)\n","  return pred_list\n","\n","for i in range(0, 20):\n","  forward_pass (data_pairs[i][0], model)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21]\n","[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n","[19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19]\n","[17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"tdDn0WW3CSP6","colab_type":"code","colab":{}},"source":["#Displaying the output of a model\n","\n","def display_output(input, model, note_range_shift=48, tempoVal=120.0, velocity=100, trackName='test1'):\n","\n","\n","  #pass the input through the model\n","  preds = forward_pass(input, model)\n","  pred = torch.tensor(preds) \n","\n","  #for debugging purposes\n","  print(pred.shape)\n","  print(pred)\n","\n","  #initialize pianoroll with same number of time steps as prediction tensor\n","  pianoroll = np.zeros((len(pred), 128))\n","\n","\n","  #loop through prediction matrix and convert to pianoroll\n","  for i in range(len(pred)):\n","        pred_i = pred[i]\n","\n","        #if 0 we dont want to shift by the note range since its silent\n","        if(pred[i] != 0):\n","            pred_i = pred[i] + note_range_shift\n","            pianoroll[i, [pred_i]]= velocity\n","\n","\n","  # Create a `pypianoroll.Track` instance\n","  track = Track(pianoroll=pianoroll, program=0, is_drum=False,\n","                name=trackName)\n","\n","  # Create a `pypianoroll.Multitrack` instance\n","  multitrack = Multitrack(tracks=[track], tempo=tempoVal,\n","                    downbeat=[0, 96, 192, 288], beat_resolution=24)\n","\n","  #plot the pianoroll - for debugging purposes\n","  track.plot()\n","  plt.show()\n","\n","\n","  #convert pianoroll into midi file and write to directory\n","  multitrack.write('drive/My Drive/Capstone - ECE496/'+ trackName +'.midi')"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"zcPia996g0yr","colab_type":"code","outputId":"b321e815-0403-4c5a-f513-1eb3d230fa24","executionInfo":{"status":"ok","timestamp":1582312466484,"user_tz":300,"elapsed":919,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":568}},"source":["#call the display funtion - converts model output to midi given an input\n","for i in range (1,30):\n","  display_output(data_pairs[i][0], model, 48, 120, 100, 'testSample')\n","\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[24, 24, 24, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 23, 24, 23, 24, 23, 23, 24, 23, 24, 23, 23, 24, 23, 23, 24, 23, 23, 23, 24, 23, 23, 21, 23, 23, 15, 21, 23, 19, 25, 15, 21, 23, 19, 9, 13, 15, 21, 3, 25, 15, 21, 25, 15, 23, 15, 23, 15, 21, 25, 21, 25, 23, 25, 15, 23, 19, 9, 13, 13, 13, 15, 23, 21, 23, 23, 15, 23, 15, 23, 15, 21, 25, 15, 23, 15, 23, 15, 23, 15, 23, 15, 21, 25, 15, 21, 25, 15, 23, 25, 15, 21, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15]\n","torch.Size([240])\n","tensor([24, 24, 24, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24,\n","        23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24, 23, 24,\n","        23, 24, 23, 24, 23, 24, 23, 24, 23, 23, 24, 23, 24, 23, 23, 24, 23, 24,\n","        23, 23, 24, 23, 23, 24, 23, 23, 23, 24, 23, 23, 21, 23, 23, 15, 21, 23,\n","        19, 25, 15, 21, 23, 19,  9, 13, 15, 21,  3, 25, 15, 21, 25, 15, 23, 15,\n","        23, 15, 21, 25, 21, 25, 23, 25, 15, 23, 19,  9, 13, 13, 13, 15, 23, 21,\n","        23, 23, 15, 23, 15, 23, 15, 21, 25, 15, 23, 15, 23, 15, 23, 15, 23, 15,\n","        21, 25, 15, 21, 25, 15, 23, 25, 15, 21, 25, 15, 25, 15, 21, 25, 15, 25,\n","        15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15,\n","        25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25,\n","        15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15,\n","        25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21,\n","        25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25,\n","        15, 25, 15, 21, 25, 15])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\neej/A37suNQEkvR7AAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"RyLtKWA1Ac5u","colab_type":"code","outputId":"7fda757a-5010-4726-b6fa-1e664b1a43a9","executionInfo":{"status":"ok","timestamp":1582312472038,"user_tz":300,"elapsed":928,"user":{"displayName":"Romal Peccia","photoUrl":"","userId":"02582866957119773670"}},"colab":{"base_uri":"https://localhost:8080/","height":568}},"source":["display_output(data_pairs[5][0], model, 48, 120, 100, 'testmodel')"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[9, 9, 20, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 21, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 4, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 13, 23, 21, 23, 23, 23, 21, 23, 23, 15, 23, 21, 23, 15, 23, 15, 21, 23, 15, 21, 25, 15, 23, 15, 21, 25, 15, 23, 15, 23, 15, 21, 25, 15, 23, 25, 15, 21, 25, 25, 15, 21, 25, 25, 15, 23, 19, 9, 25, 15, 23, 15, 23, 15, 23, 15, 23, 15, 23, 15, 23, 15, 21, 25, 15, 21, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15]\n","torch.Size([240])\n","tensor([ 9,  9, 20, 20, 20, 20, 20, 14, 20, 20, 14, 20, 20, 14, 21, 10, 10, 10,\n","        10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  4,  9,  9,  9,  9,\n","         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,\n","         9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 13, 23, 21, 23,\n","        23, 23, 21, 23, 23, 15, 23, 21, 23, 15, 23, 15, 21, 23, 15, 21, 25, 15,\n","        23, 15, 21, 25, 15, 23, 15, 23, 15, 21, 25, 15, 23, 25, 15, 21, 25, 25,\n","        15, 21, 25, 25, 15, 23, 19,  9, 25, 15, 23, 15, 23, 15, 23, 15, 23, 15,\n","        23, 15, 23, 15, 21, 25, 15, 21, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25,\n","        15, 21, 25, 15, 25, 15, 25, 15, 21, 25, 25, 15, 25, 15, 25, 15, 21, 25,\n","        25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15,\n","        25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15,\n","        25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25, 15, 21,\n","        25, 15, 25, 15, 25, 15, 25, 15, 21, 25, 15, 25, 15, 25, 15, 25, 15, 25,\n","        15, 21, 25, 15, 25, 15])\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}